{
  "language": "Solidity",
  "sources": {
    "contracts/AFSSteward_v3_matic.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"../vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/math/SafeMath.sol\";\nimport \"../vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/Initializable.sol\";\n\nimport \"./ERC721Patronage_v1.sol\";\nimport \"./interfaces/IMintManager.sol\";\nimport \"./interfaces/IERC721Patronage.sol\";\nimport \"./interfaces/IERC20Mintable.sol\";\n// import \"./GSNRecipientBase.sol\";\n\nimport \"../vendered/gsn-2.0.0-beta.1.3/contracts/BaseRelayRecipient.sol\";\nimport \"../vendered/gsn-2.0.0-beta.1.3/contracts/interfaces/IKnowForwarderAddressGsn.sol\";\n\n// import \"@nomiclabs/buidler/console.sol\";\n\ncontract AFSSteward_v3_matic is\n    Initializable,\n    BaseRelayRecipient,\n    IKnowForwarderAddressGsn\n{\n    /*\n    This smart contract collects patronage from current owner through a Harberger tax model and \n    takes stewardship of the asset token if the patron can't pay anymore.\n\n    Harberger Tax (COST):\n    - Asset is always on sale.\n    - You have to have a price set.\n    - Tax (Patronage) is paid to maintain ownership.\n    - Steward maints control over ERC721.\n    */\n    using SafeMath for uint256;\n    mapping(uint256 => uint256) public price; //in wei\n    IERC721Patronage public assetToken; // ERC721 NFT.\n\n    mapping(uint256 => uint256) deprecated_totalCollected; // THIS VALUE IS DEPRECATED\n    mapping(uint256 => uint256) deprecated_currentCollected; // THIS VALUE IS DEPRECATED\n    mapping(uint256 => uint256) deprecated_timeLastCollected; // THIS VALUE IS DEPRECATED.\n    mapping(address => uint256) public timeLastCollectedPatron;\n    mapping(address => uint256) public deposit;\n    mapping(address => uint256) public totalPatronOwnedTokenCost;\n\n    mapping(uint256 => address) public benefactors; // non-profit benefactor\n    mapping(address => uint256) public benefactorFunds;\n\n    mapping(uint256 => address) deprecated_currentPatron; // Deprecate This is different to the current token owner.\n    mapping(uint256 => mapping(address => bool)) deprecated_patrons; // Deprecate\n    mapping(uint256 => mapping(address => uint256)) deprecated_timeHeld; // Deprecate\n\n    mapping(uint256 => uint256) deprecated_timeAcquired; // deprecate\n\n    // 1200% patronage\n    mapping(uint256 => uint256) public patronageNumerator;\n    uint256 public patronageDenominator;\n\n    enum StewardState {Foreclosed, Owned}\n    mapping(uint256 => StewardState) public state;\n\n    address public admin;\n\n    //////////////// NEW variables in v2///////////////////\n    mapping(uint256 => uint256) deprecated_tokenGenerationRate; // we can reuse the patronage denominator\n\n    IMintManager public mintManager;\n    //////////////// NEW variables in v3 ///////////////////\n    uint256 public auctionStartPrice;\n    uint256 public auctionEndPrice;\n    uint256 public auctionLength;\n\n    mapping(uint256 => address) public artistAddresses; //mapping from tokenID to the artists address\n    mapping(uint256 => uint256) public serviceProviderPercentages; // mapping from tokenID to the percentage sale cut of wildcards for each token\n    mapping(uint256 => uint256) public artistPercentages; // tokenId to artist percetages. To make it configurable. 10 000 = 100%\n    mapping(uint256 => uint256) public tokenAuctionBeginTimestamp;\n\n    mapping(address => uint256) public totalPatronTokenGenerationRate; // The total token generation rate for all the tokens of the given address.\n    mapping(address => uint256) public totalBenefactorTokenNumerator;\n    mapping(address => uint256) public timeLastCollectedBenefactor; // make my name consistent please\n    mapping(address => uint256) public benefactorCredit;\n    address public withdrawCheckerAdmin;\n\n    mapping(uint256 => bool) public withdrawalNonceUsed; // if true, the nonce (part of a withdrawal signature) has already been used for a withdrawal.\n\n    /*\n    31536000 seconds = 365 days\n\n    divisor = 365 days * 1000000000000\n            = 31536000000000000000\n    */\n\n    // 11574074074074 = 10^18 / 86400 This is just less (rounded down) than one token a day.\n    //       - this can be done since all tokens have the exact same tokenGenerationRate - and hardcoding saves gas.\n    uint256 public constant globalTokenGenerationRate = 11574074074074;\n    uint256 public constant yearTimePatronagDenominator = 31536000000000000000;\n\n    IERC20Mintable public paymentToken; // ERC20 token used as payment.\n\n    event Buy(uint256 indexed tokenId, address indexed owner, uint256 price);\n    event PriceChange(uint256 indexed tokenId, uint256 newPrice);\n    event Foreclosure(address indexed prevOwner, uint256 foreclosureTime);\n    event RemainingDepositUpdate(\n        address indexed tokenPatron,\n        uint256 remainingDeposit\n    );\n\n    event AddTokenV3(\n        uint256 indexed tokenId,\n        uint256 patronageNumerator,\n        uint256 unixTimestampOfTokenAuctionStart\n    );\n\n    // QUESTION: in future versions, should these two events (CollectPatronage and CollectLoyalty) be combined into one? - they only ever happen at the same time.\n    // NOTE: this event is deprecated - it is only here for the upgrade function.\n    event CollectPatronage(\n        uint256 indexed tokenId,\n        address indexed patron,\n        uint256 remainingDeposit,\n        uint256 amountReceived\n    );\n    event CollectLoyalty(address indexed patron, uint256 amountRecieved);\n\n    event ArtistCommission(\n        uint256 indexed tokenId,\n        address artist,\n        uint256 artistCommission\n    );\n    event WithdrawBenefactorFundsWithSafetyDelay(\n        address indexed benefactor,\n        uint256 withdrawAmount\n    );\n    event WithdrawBenefactorFunds(\n        address indexed benefactor,\n        uint256 withdrawAmount\n    );\n    event UpgradeToV3();\n    event ChangeAuctionParameters();\n\n    event SetArt(\n        uint256 indexed tokenId,\n        address indexed tokenContract,\n        uint256 indexed artTokenId\n    );\n\n    modifier onlyPatron(uint256 tokenId) {\n        require(_msgSender() == assetToken.ownerOf(tokenId), \"Not patron\");\n        _;\n    }\n\n    modifier onlyAdmin() {\n        require(_msgSender() == admin, \"Not admin\");\n        _;\n    }\n\n    modifier onlyReceivingBenefactorOrAdmin(uint256 tokenId) {\n        require(\n            _msgSender() == benefactors[tokenId] || _msgSender() == admin,\n            \"Not benefactor or admin\"\n        );\n        _;\n    }\n\n    modifier collectPatronageAndSettleBenefactor(uint256 tokenId) {\n        _collectPatronageAndSettleBenefactor(tokenId);\n        _;\n    }\n\n    modifier collectPatronagePatron(address tokenPatron) {\n        _collectPatronagePatron(tokenPatron);\n        _;\n    }\n\n    modifier youCurrentlyAreNotInDefault(address tokenPatron) {\n        require(\n            !(deposit[tokenPatron] == 0 &&\n                totalPatronOwnedTokenCost[tokenPatron] > 0),\n            \"no deposit existing tokens\"\n        );\n        _;\n    }\n\n    modifier updateBenefactorBalance(address benefactor) {\n        _updateBenefactorBalance(benefactor);\n        _;\n    }\n\n    modifier priceGreaterThanZero(uint256 _newPrice) {\n        require(_newPrice > 0, \"Price is zero\");\n        _;\n    }\n    modifier notNullAddress(address checkAddress) {\n        require(checkAddress != address(0), \"null address\");\n        _;\n    }\n    modifier notSameAddress(address firstAddress, address secondAddress) {\n        require(firstAddress != secondAddress, \"cannot be same address\");\n        _;\n    }\n    modifier validWildcardsPercentage(\n        uint256 serviceProviderPercentage,\n        uint256 tokenID\n    ) {\n        require(\n            serviceProviderPercentage >= 50000 &&\n                serviceProviderPercentage <=\n                (1000000 - artistPercentages[tokenID]), // not sub safemath. Is this okay?\n            \"commision not between 5% and 100%\"\n        );\n        _;\n    }\n\n    function initialize(\n        address _assetToken,\n        address _admin,\n        address _mintManager,\n        address _withdrawCheckerAdmin,\n        uint256 _auctionStartPrice,\n        uint256 _auctionEndPrice,\n        uint256 _auctionLength,\n        address _paymentToken,\n        address _trustedForwarder\n    ) public initializer {\n        emit UpgradeToV3();\n        assetToken = IERC721Patronage(_assetToken);\n        admin = _admin;\n        withdrawCheckerAdmin = _withdrawCheckerAdmin;\n        mintManager = IMintManager(_mintManager);\n        paymentToken = IERC20Mintable(_paymentToken);\n        _changeAuctionParameters(\n            _auctionStartPrice,\n            _auctionEndPrice,\n            _auctionLength\n        );\n\n        setTrustedForwarder(_trustedForwarder);\n    }\n\n    function getTrustedForwarder() public override view returns (address) {\n        return trustedForwarder;\n    }\n\n    function setTrustedForwarder(address forwarder) public onlyAdmin {\n        trustedForwarder = forwarder;\n    }\n\n    function uintToStr(uint256 _i)\n        internal\n        pure\n        returns (string memory _uintAsString)\n    {\n        if (_i == 0) {\n            return \"0\";\n        }\n\n        uint256 j = _i;\n        uint256 len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n\n        bytes memory bstr = new bytes(len);\n        while (_i != 0) {\n            bstr[--len] = bytes1(uint8(48 + (_i % 10)));\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n\n    function listNewTokens(\n        uint256[] memory tokens,\n        address[] memory _benefactors,\n        uint256[] memory _patronageNumerator,\n        address[] memory _artists,\n        uint256[] memory _artistCommission,\n        uint256[] memory _releaseDate\n    ) public onlyAdmin {\n        assert(tokens.length == _benefactors.length);\n        assert(tokens.length == _patronageNumerator.length);\n        assert(tokens.length == _releaseDate.length);\n        assert(_artists.length == _artistCommission.length);\n\n        for (uint8 i = 0; i < tokens.length; ++i) {\n            address benefactor = _benefactors[i];\n            require(_benefactors[i] != address(0), \"null address\");\n            string memory idString = uintToStr(tokens[i]);\n            string memory tokenUriBase = \"https://wildcards.xyz/token/\";\n            string memory tokenUri = string(\n                abi.encodePacked(tokenUriBase, idString)\n            );\n            assetToken.mintWithTokenURI(address(this), tokens[i], tokenUri);\n            benefactors[tokens[i]] = _benefactors[i];\n            state[tokens[i]] = StewardState.Foreclosed;\n            patronageNumerator[tokens[i]] = _patronageNumerator[i];\n            // tokenGenerationRate[tokens[i]] = _tokenGenerationRate[i];\n\n            if (_releaseDate[i] < now) {\n                tokenAuctionBeginTimestamp[tokens[i]] = now;\n            } else {\n                tokenAuctionBeginTimestamp[tokens[i]] = _releaseDate[i];\n            }\n\n            emit AddTokenV3(\n                tokens[i],\n                _patronageNumerator[i],\n                tokenAuctionBeginTimestamp[tokens[i]]\n            );\n            // Adding this after the add token emit, so graph can first capture the token before processing the change artist things\n            if (_artists.length > i) {\n                changeArtistAddressAndCommission(\n                    tokens[i],\n                    _artists[i],\n                    _artistCommission[i]\n                );\n            }\n        }\n    }\n\n    // TODO: you need an event in here!\n    function changeReceivingBenefactor(\n        uint256 tokenId,\n        address _newReceivingBenefactor\n    )\n        public\n        onlyReceivingBenefactorOrAdmin(tokenId)\n        updateBenefactorBalance(benefactors[tokenId])\n        updateBenefactorBalance(_newReceivingBenefactor)\n        notNullAddress(_newReceivingBenefactor)\n    {\n        address oldBenfactor = benefactors[tokenId];\n\n        require(\n            oldBenfactor != _newReceivingBenefactor,\n            \"cannot be same address\"\n        );\n\n        // Collect patronage from old and new benefactor before changing totalBenefactorTokenNumerator on both\n        uint256 scaledPrice = price[tokenId].mul(patronageNumerator[tokenId]);\n        totalBenefactorTokenNumerator[oldBenfactor] = totalBenefactorTokenNumerator[oldBenfactor]\n            .sub(scaledPrice);\n        totalBenefactorTokenNumerator[_newReceivingBenefactor] = totalBenefactorTokenNumerator[_newReceivingBenefactor]\n            .add(scaledPrice);\n\n        benefactors[tokenId] = _newReceivingBenefactor;\n        // NB No fund exchanging here please!\n    }\n\n    // TODO: you need an event in here!\n    // NB This function is if an organisation loses their keys etc..\n    // It will transfer their deposit to their new benefactor address\n    // It should only be called once all their tokens also changeReceivingBenefactor\n    function changeReceivingBenefactorDeposit(\n        address oldBenfactor,\n        address _newReceivingBenefactor\n    )\n        public\n        onlyAdmin\n        notNullAddress(_newReceivingBenefactor)\n        notSameAddress(oldBenfactor, _newReceivingBenefactor)\n    {\n        require(benefactorFunds[oldBenfactor] > 0, \"no funds\");\n\n        benefactorFunds[_newReceivingBenefactor] = benefactorFunds[_newReceivingBenefactor]\n            .add(benefactorFunds[oldBenfactor]);\n        benefactorFunds[oldBenfactor] = 0;\n    }\n\n    function changeAdmin(address _admin) public onlyAdmin {\n        admin = _admin;\n    }\n\n    function changeWithdrawCheckerAdmin(address _withdrawCheckerAdmin)\n        public\n        onlyAdmin\n        notNullAddress(_withdrawCheckerAdmin)\n    {\n        withdrawCheckerAdmin = _withdrawCheckerAdmin;\n    }\n\n    function changeArtistAddressAndCommission(\n        uint256 tokenId,\n        address artistAddress,\n        uint256 percentage\n    ) public onlyAdmin {\n        require(percentage <= 200000, \"not more than 20%\");\n        artistPercentages[tokenId] = percentage;\n        artistAddresses[tokenId] = artistAddress;\n        emit ArtistCommission(tokenId, artistAddress, percentage);\n    }\n\n    function _changeAuctionParameters(\n        uint256 _auctionStartPrice,\n        uint256 _auctionEndPrice,\n        uint256 _auctionLength\n    ) internal {\n        require(\n            _auctionStartPrice >= _auctionEndPrice,\n            \"auction start < auction end\"\n        );\n        require(_auctionLength >= 86400, \"1 day min auction length\");\n\n        auctionStartPrice = _auctionStartPrice;\n        auctionEndPrice = _auctionEndPrice;\n        auctionLength = _auctionLength;\n        emit ChangeAuctionParameters();\n    }\n\n    function changeAuctionParameters(\n        uint256 _auctionStartPrice,\n        uint256 _auctionEndPrice,\n        uint256 _auctionLength\n    ) external onlyAdmin {\n        _changeAuctionParameters(\n            _auctionStartPrice,\n            _auctionEndPrice,\n            _auctionLength\n        );\n    }\n\n    function patronageOwedPatron(address tokenPatron)\n        public\n        view\n        returns (uint256 patronageDue)\n    {\n        // NOTE: Leaving this code here as a reminder: totalPatronOwnedTokenCost[tokenPatron] has to be zero if timeLastCollectedPatron[tokenPatron] is zero. So effectively this line isn't needed.\n        // if (timeLastCollectedPatron[tokenPatron] == 0) return 0;\n        return\n            totalPatronOwnedTokenCost[tokenPatron]\n                .mul(now.sub(timeLastCollectedPatron[tokenPatron]))\n                .div(yearTimePatronagDenominator);\n    }\n\n    function patronageDueBenefactor(address benefactor)\n        public\n        view\n        returns (uint256 payoutDue)\n    {\n        // NOTE: Leaving this code here as a reminder: totalBenefactorTokenNumerator[tokenPatron] has to be zero if timeLastCollectedBenefactor[tokenPatron] is zero. So effectively this line isn't needed.\n        // if (timeLastCollectedBenefactor[benefactor] == 0) return 0;\n        return\n            totalBenefactorTokenNumerator[benefactor]\n                .mul(now.sub(timeLastCollectedBenefactor[benefactor]))\n                .div(yearTimePatronagDenominator);\n    }\n\n    function foreclosedPatron(address tokenPatron) public view returns (bool) {\n        if (patronageOwedPatron(tokenPatron) >= deposit[tokenPatron]) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function foreclosed(uint256 tokenId) public view returns (bool) {\n        address tokenPatron = assetToken.ownerOf(tokenId);\n        return foreclosedPatron(tokenPatron);\n    }\n\n    function depositAbleToWithdraw(address tokenPatron)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 collection = patronageOwedPatron(tokenPatron);\n        if (collection >= deposit[tokenPatron]) {\n            return 0;\n        } else {\n            return deposit[tokenPatron].sub(collection);\n        }\n    }\n\n    function foreclosureTimePatron(address tokenPatron)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 pps = totalPatronOwnedTokenCost[tokenPatron].div(\n            yearTimePatronagDenominator\n        );\n        return now.add(depositAbleToWithdraw(tokenPatron).div(pps));\n    }\n\n    function foreclosureTime(uint256 tokenId) public view returns (uint256) {\n        address tokenPatron = assetToken.ownerOf(tokenId);\n        return foreclosureTimePatron(tokenPatron);\n    }\n\n    /* actions */\n    function _collectLoyaltyPatron(\n        address tokenPatron,\n        uint256 timeSinceLastMint\n    ) internal {\n        if (timeSinceLastMint != 0) {\n            mintManager.tokenMint(\n                tokenPatron,\n                timeSinceLastMint,\n                totalPatronTokenGenerationRate[tokenPatron]\n            );\n            emit CollectLoyalty(\n                tokenPatron,\n                timeSinceLastMint.mul(\n                    totalPatronTokenGenerationRate[tokenPatron]\n                )\n            );\n        }\n    }\n\n    // TODO: create a version of this function that only collects patronage (and only settles the benefactor if the token forecloses) - is this needed?\n    function _collectPatronageAndSettleBenefactor(uint256 tokenId) public {\n        address tokenPatron = assetToken.ownerOf(tokenId);\n        uint256 newTimeLastCollectedOnForeclosure = _collectPatronagePatron(\n            tokenPatron\n        );\n\n        address benefactor = benefactors[tokenId];\n        // bool tokenForeclosed = newTimeLastCollectedOnForeclosure > 0;\n        bool tokenIsOwned = state[tokenId] == StewardState.Owned;\n        if (newTimeLastCollectedOnForeclosure > 0 && tokenIsOwned) {\n            tokenAuctionBeginTimestamp[tokenId] =\n                // The auction starts the second after the last time collected.\n                newTimeLastCollectedOnForeclosure +\n                1;\n\n\n                uint256 patronageDueBenefactorBeforeForeclosure\n             = patronageDueBenefactor(benefactor);\n\n            _foreclose(tokenId);\n\n            uint256 amountOverCredited = price[tokenId]\n                .mul(now.sub(newTimeLastCollectedOnForeclosure))\n                .mul(patronageNumerator[tokenId])\n                .div(yearTimePatronagDenominator);\n\n            if (amountOverCredited < patronageDueBenefactorBeforeForeclosure) {\n                _increaseBenefactorBalance(\n                    benefactor,\n                    patronageDueBenefactorBeforeForeclosure - amountOverCredited\n                );\n            } else {\n                _decreaseBenefactorBalance(\n                    benefactor,\n                    amountOverCredited - patronageDueBenefactorBeforeForeclosure\n                );\n            }\n\n            timeLastCollectedBenefactor[benefactor] = now;\n        } else {\n            _updateBenefactorBalance(benefactor);\n        }\n    }\n\n    // function safeSend(uint256 _wei, address payable recipient)\n    //     internal\n    //     returns (bool transferSuccess)\n    // {\n    //     (transferSuccess, ) = recipient.call.gas(2300).value(_wei)(\"\");\n    // }\n\n    function sendErc20(uint256 _wei, address recipient)\n        internal\n        returns (bool transferSuccess)\n    {\n        // try adaiContract.redeem(amount)  {\n        return paymentToken.transfer(recipient, _wei);\n        // } catch {\n        //   emit ADaiRedeemFailed();\n        //   adaiContract.transfer(_msgSender(), amount);\n        // }\n    }\n\n    function receiveErc20(uint256 amount, address from)\n        internal\n        returns (bool transferSuccess)\n    {\n        return paymentToken.transferFrom(_msgSender(), address(this), amount);\n    }\n\n    // if credit balance exists,\n    // if amount owed > creidt\n    // credit zero add amount\n    // else reduce credit by certain amount.\n    // else if credit balance doesn't exist\n    // add amount to balance\n    // TODO: this function should have an event\n    function _updateBenefactorBalance(address benefactor) public {\n        uint256 patronageDueForBenefactor = patronageDueBenefactor(benefactor);\n\n        if (patronageDueForBenefactor > 0) {\n            _increaseBenefactorBalance(benefactor, patronageDueForBenefactor);\n        }\n\n        timeLastCollectedBenefactor[benefactor] = now;\n    }\n\n    function _increaseBenefactorBalance(\n        address benefactor,\n        uint256 patronageDueBenefactor\n    ) internal {\n        if (benefactorCredit[benefactor] > 0) {\n            if (patronageDueBenefactor < benefactorCredit[benefactor]) {\n                benefactorCredit[benefactor] = benefactorCredit[benefactor].sub(\n                    patronageDueBenefactor\n                );\n            } else {\n                benefactorFunds[benefactor] = patronageDueBenefactor.sub(\n                    benefactorCredit[benefactor]\n                );\n                benefactorCredit[benefactor] = 0;\n            }\n        } else {\n            benefactorFunds[benefactor] = benefactorFunds[benefactor].add(\n                patronageDueBenefactor\n            );\n        }\n    }\n\n    function _decreaseBenefactorBalance(\n        address benefactor,\n        uint256 amountOverCredited\n    ) internal {\n        if (benefactorFunds[benefactor] > 0) {\n            if (amountOverCredited <= benefactorFunds[benefactor]) {\n                benefactorFunds[benefactor] = benefactorFunds[benefactor].sub(\n                    amountOverCredited\n                );\n            } else {\n                benefactorCredit[benefactor] = amountOverCredited.sub(\n                    benefactorFunds[benefactor]\n                );\n                benefactorFunds[benefactor] = 0;\n            }\n        } else {\n            benefactorCredit[benefactor] = benefactorCredit[benefactor].add(\n                amountOverCredited\n            );\n        }\n    }\n\n    function fundsDueForAuctionPeriodAtCurrentRate(address benefactor)\n        internal\n        view\n        returns (uint256)\n    {\n        return\n            totalBenefactorTokenNumerator[benefactor].mul(auctionLength).div(\n                yearTimePatronagDenominator\n            ); // 365 days * 1000000000000\n    }\n\n    function withdrawBenefactorFundsTo(address benefactor) public {\n        _updateBenefactorBalance(benefactor);\n\n        uint256 availableToWithdraw = benefactorFunds[benefactor];\n\n\n            uint256 benefactorWithdrawalSafetyDiscount\n         = fundsDueForAuctionPeriodAtCurrentRate(benefactor);\n\n        require(\n            availableToWithdraw > benefactorWithdrawalSafetyDiscount,\n            \"no funds\"\n        );\n\n        // NOTE: no need for safe-maths, above require prevents issues.\n        uint256 amountToWithdraw = availableToWithdraw -\n            benefactorWithdrawalSafetyDiscount;\n\n        benefactorFunds[benefactor] = benefactorWithdrawalSafetyDiscount;\n        if (sendErc20(amountToWithdraw, benefactor)) {\n            emit WithdrawBenefactorFundsWithSafetyDelay(\n                benefactor,\n                amountToWithdraw\n            );\n        } else {\n            // TODO: add an error in unsuccessful withdrawal.\n            benefactorFunds[benefactor] = benefactorFunds[benefactor].add(\n                amountToWithdraw\n            );\n        }\n    }\n\n    function hasher(\n        address benefactor,\n        uint256 maxAmount,\n        uint256 expiry,\n        uint256 nonce\n    ) public view returns (bytes32) {\n        // In ethereum you have to prepend all signature hashes with this message (supposedly to prevent people from)\n        return\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19Ethereum Signed Message:\\n32\",\n                    keccak256(\n                        abi.encodePacked(benefactor, maxAmount, expiry, nonce)\n                    )\n                )\n            );\n    }\n\n    function withdrawBenefactorFundsToValidated(\n        address benefactor,\n        uint256 maxAmount,\n        uint256 expiry,\n        uint256 nonce,\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public {\n        require(\n            ecrecover(hash, v, r, s) == withdrawCheckerAdmin,\n            \"no permission to withdraw\"\n        );\n        require(!withdrawalNonceUsed[nonce], \"nonce already used\");\n        require(\n            hash == hasher(benefactor, maxAmount, expiry, nonce),\n            \"incorrect hash\"\n        );\n        require(now < expiry, \"coupon expired\");\n        withdrawalNonceUsed[nonce] = true;\n\n        _updateBenefactorBalance(benefactor);\n\n        uint256 availableToWithdraw = benefactorFunds[benefactor];\n\n        if (availableToWithdraw > 0) {\n            if (availableToWithdraw > maxAmount) {\n                if (sendErc20(maxAmount, benefactor)) {\n                    benefactorFunds[benefactor] = availableToWithdraw.sub(\n                        maxAmount\n                    );\n                    emit WithdrawBenefactorFunds(\n                        benefactor,\n                        availableToWithdraw\n                    );\n                }\n            } else {\n                uint256 contractBalance = paymentToken.balanceOf(address(this));\n\n                if (sendErc20(availableToWithdraw, benefactor)) {\n                    // TODO: re-entrancy\n                    benefactorFunds[benefactor] = 0;\n                    emit WithdrawBenefactorFunds(\n                        benefactor,\n                        availableToWithdraw\n                    );\n                }\n            }\n        }\n    }\n\n    function _collectPatronagePatron(address tokenPatron)\n        public\n        returns (uint256 newTimeLastCollectedOnForeclosure)\n    {\n        uint256 patronageOwedByTokenPatron = patronageOwedPatron(tokenPatron);\n\n        uint256 timeSinceLastMint;\n\n        if (\n            patronageOwedByTokenPatron > 0 &&\n            patronageOwedByTokenPatron > deposit[tokenPatron]\n        ) {\n\n                uint256 previousCollectionTime\n             = timeLastCollectedPatron[tokenPatron];\n            newTimeLastCollectedOnForeclosure = previousCollectionTime.add(\n                (\n                    (now.sub(previousCollectionTime))\n                        .mul(deposit[tokenPatron])\n                        .div(patronageOwedByTokenPatron)\n                )\n            );\n            timeLastCollectedPatron[tokenPatron] = newTimeLastCollectedOnForeclosure;\n            deposit[tokenPatron] = 0;\n            timeSinceLastMint = (\n                newTimeLastCollectedOnForeclosure.sub(previousCollectionTime)\n            );\n        } else {\n            timeSinceLastMint = now.sub(timeLastCollectedPatron[tokenPatron]);\n            timeLastCollectedPatron[tokenPatron] = now;\n            deposit[tokenPatron] = deposit[tokenPatron].sub(\n                patronageOwedByTokenPatron\n            );\n        }\n\n        _collectLoyaltyPatron(tokenPatron, timeSinceLastMint);\n        emit RemainingDepositUpdate(tokenPatron, deposit[tokenPatron]);\n    }\n\n    function depositWei(uint256 amount) public {\n        depositWeiPatron(_msgSender(), amount);\n    }\n\n    // Which the 'approve' function in erc20 this function is unsafe to be public.\n    function depositWeiPatron(address patron, uint256 amount) internal {\n        require(totalPatronOwnedTokenCost[patron] > 0, \"no tokens\");\n        deposit[patron] = deposit[patron].add(amount);\n        receiveErc20(amount, patron);\n        emit RemainingDepositUpdate(patron, deposit[patron]);\n    }\n\n    function _auctionPrice(uint256 tokenId) internal view returns (uint256) {\n        uint256 auctionEnd = tokenAuctionBeginTimestamp[tokenId].add(\n            auctionLength\n        );\n\n        // If it is not brand new and foreclosed, use the foreclosre auction price.\n        uint256 _auctionStartPrice;\n        if (price[tokenId] != 0 && price[tokenId] > auctionEndPrice) {\n            _auctionStartPrice = price[tokenId];\n        } else {\n            // Otherwise use starting auction price\n            _auctionStartPrice = auctionStartPrice;\n        }\n\n        if (now >= auctionEnd) {\n            return auctionEndPrice;\n        } else {\n            // startPrice - ( ( (startPrice - endPrice) * howLongThisAuctionBeenGoing ) / auctionLength )\n            return\n                _auctionStartPrice.sub(\n                    (_auctionStartPrice.sub(auctionEndPrice))\n                        .mul(now.sub(tokenAuctionBeginTimestamp[tokenId]))\n                        .div(auctionLength)\n                );\n        }\n    }\n\n    function buy(\n        uint256 tokenId,\n        uint256 _newPrice,\n        uint256 previousPrice,\n        uint256 serviceProviderPercentage,\n        uint256 depositAmount\n    )\n        public\n        collectPatronageAndSettleBenefactor(tokenId)\n        collectPatronagePatron(_msgSender())\n        priceGreaterThanZero(_newPrice)\n        youCurrentlyAreNotInDefault(_msgSender())\n        validWildcardsPercentage(serviceProviderPercentage, tokenId)\n    {\n        require(state[tokenId] == StewardState.Owned, \"token on auction\");\n        require(\n            price[tokenId] == previousPrice,\n            \"must specify current price accurately\"\n        );\n        receiveErc20(depositAmount.add(price[tokenId]), _msgSender());\n        address owner = assetToken.ownerOf(tokenId);\n\n        _distributePurchaseProceeds(tokenId);\n\n        serviceProviderPercentages[tokenId] = serviceProviderPercentage;\n        deposit[_msgSender()] = deposit[_msgSender()].add(depositAmount);\n        transferAssetTokenTo(\n            tokenId,\n            assetToken.ownerOf(tokenId),\n            _msgSender(),\n            _newPrice\n        );\n        emit Buy(tokenId, _msgSender(), _newPrice);\n    }\n\n    function buyAndSetArt(\n        uint256 tokenId,\n        uint256 _newPrice,\n        uint256 previousPrice,\n        uint256 serviceProviderPercentage,\n        uint256 depositAmount,\n        address artTokenAddress,\n        uint256 artTokenId\n    ) public payable {\n        buy(\n            tokenId,\n            _newPrice,\n            previousPrice,\n            serviceProviderPercentage,\n            depositAmount\n        );\n        emit SetArt(tokenId, artTokenAddress, artTokenId);\n    }\n\n    function buyAuction(\n        uint256 tokenId,\n        uint256 _newPrice,\n        uint256 serviceProviderPercentage,\n        uint256 depositAmount\n    )\n        public\n        collectPatronageAndSettleBenefactor(tokenId)\n        collectPatronagePatron(_msgSender())\n        priceGreaterThanZero(_newPrice)\n        youCurrentlyAreNotInDefault(_msgSender())\n        validWildcardsPercentage(serviceProviderPercentage, tokenId)\n    {\n        require(\n            state[tokenId] == StewardState.Foreclosed,\n            \"token not foreclosed\"\n        );\n        require(now >= tokenAuctionBeginTimestamp[tokenId], \"not on auction\");\n        uint256 auctionTokenPrice = _auctionPrice(tokenId);\n\n        // uint256 remainingValueForDeposit = msg.value.sub(auctionTokenPrice);\n\n        _distributeAuctionProceeds(tokenId);\n\n        state[tokenId] = StewardState.Owned;\n\n        serviceProviderPercentages[tokenId] = serviceProviderPercentage;\n        receiveErc20(depositAmount.add(auctionTokenPrice), _msgSender());\n        deposit[_msgSender()] = deposit[_msgSender()].add(depositAmount);\n        transferAssetTokenTo(\n            tokenId,\n            assetToken.ownerOf(tokenId),\n            _msgSender(),\n            _newPrice\n        );\n        emit Buy(tokenId, _msgSender(), _newPrice);\n    }\n\n    function buyAuctionAndSetArt(\n        uint256 tokenId,\n        uint256 _newPrice,\n        uint256 serviceProviderPercentage,\n        uint256 depositAmount,\n        address artTokenAddress,\n        uint256 artTokenId\n    ) public payable {\n        buyAuction(\n            tokenId,\n            _newPrice,\n            serviceProviderPercentage,\n            depositAmount\n        );\n        emit SetArt(tokenId, artTokenAddress, artTokenId);\n    }\n\n    function _distributeAuctionProceeds(uint256 tokenId) internal {\n        uint256 totalAmount = price[tokenId];\n        uint256 artistAmount;\n        if (artistPercentages[tokenId] == 0) {\n            artistAmount = 0;\n        } else {\n            artistAmount = totalAmount.mul(artistPercentages[tokenId]).div(\n                1000000\n            );\n            deposit[artistAddresses[tokenId]] = deposit[artistAddresses[tokenId]]\n                .add(artistAmount);\n        }\n        uint256 wildcardsAmount = totalAmount.sub(artistAmount);\n        deposit[admin] = deposit[admin].add(wildcardsAmount);\n    }\n\n    function _distributePurchaseProceeds(uint256 tokenId) internal {\n        uint256 totalAmount = price[tokenId];\n        address tokenPatron = assetToken.ownerOf(tokenId);\n        // Wildcards percentage calc\n        if (serviceProviderPercentages[tokenId] == 0) {\n            serviceProviderPercentages[tokenId] = 50000;\n        }\n        uint256 wildcardsAmount = totalAmount\n            .mul(serviceProviderPercentages[tokenId])\n            .div(1000000);\n\n        // Artist percentage calc\n        uint256 artistAmount;\n        if (artistPercentages[tokenId] == 0) {\n            artistAmount = 0;\n        } else {\n            artistAmount = totalAmount.mul(artistPercentages[tokenId]).div(\n                1000000\n            );\n            deposit[artistAddresses[tokenId]] = deposit[artistAddresses[tokenId]]\n                .add(artistAmount);\n        }\n\n        uint256 previousOwnerProceedsFromSale = totalAmount\n            .sub(wildcardsAmount)\n            .sub(artistAmount);\n        if (\n            totalPatronOwnedTokenCost[tokenPatron] ==\n            price[tokenId].mul(patronageNumerator[tokenId])\n        ) {\n            previousOwnerProceedsFromSale = previousOwnerProceedsFromSale.add(\n                deposit[tokenPatron]\n            );\n            deposit[tokenPatron] = 0;\n            // address payableCurrentPatron = address(uint160(tokenPatron));\n            // (bool transferSuccess, ) = payableCurrentPatron\n            //     .call\n            //     .gas(2300)\n            //     .value(previousOwnerProceedsFromSale)(\"\");\n            // if (!transferSuccess) {\n            //     deposit[tokenPatron] = deposit[tokenPatron].add(\n            //         previousOwnerProceedsFromSale\n            //     );\n            // }\n\n            sendErc20(previousOwnerProceedsFromSale, tokenPatron);\n        } else {\n            deposit[tokenPatron] = deposit[tokenPatron].add(\n                previousOwnerProceedsFromSale\n            );\n        }\n\n        deposit[admin] = deposit[admin].add(wildcardsAmount);\n    }\n\n    function changePrice(uint256 tokenId, uint256 _newPrice)\n        public\n        onlyPatron(tokenId)\n        collectPatronageAndSettleBenefactor(tokenId)\n    {\n        require(state[tokenId] != StewardState.Foreclosed, \"foreclosed\");\n        require(_newPrice != 0, \"incorrect price\");\n        require(_newPrice < 10000 ether, \"exceeds max price\");\n\n        uint256 oldPriceScaled = price[tokenId].mul(\n            patronageNumerator[tokenId]\n        );\n        uint256 newPriceScaled = _newPrice.mul(patronageNumerator[tokenId]);\n        address tokenBenefactor = benefactors[tokenId];\n\n        totalPatronOwnedTokenCost[_msgSender()] = totalPatronOwnedTokenCost[msg\n            .sender]\n            .sub(oldPriceScaled)\n            .add(newPriceScaled);\n\n        totalBenefactorTokenNumerator[tokenBenefactor] = totalBenefactorTokenNumerator[tokenBenefactor]\n            .sub(oldPriceScaled)\n            .add(newPriceScaled);\n\n        price[tokenId] = _newPrice;\n        emit PriceChange(tokenId, price[tokenId]);\n    }\n\n    function withdrawDeposit(uint256 _wei)\n        public\n        collectPatronagePatron(_msgSender())\n        returns (uint256)\n    {\n        _withdrawDeposit(_wei);\n    }\n\n    function withdrawBenefactorFunds() public {\n        withdrawBenefactorFundsTo(_msgSender());\n    }\n\n    function exit() public collectPatronagePatron(_msgSender()) {\n        _withdrawDeposit(deposit[_msgSender()]);\n    }\n\n    function _withdrawDeposit(uint256 _wei) internal {\n        require(deposit[_msgSender()] >= _wei, \"withdrawing too much\");\n\n        deposit[_msgSender()] = deposit[_msgSender()].sub(_wei);\n\n        if (!sendErc20(_wei, _msgSender())) {\n            revert(\"withdrawal failed\");\n        }\n    }\n\n    function _foreclose(uint256 tokenId) internal {\n        address currentOwner = assetToken.ownerOf(tokenId);\n        resetTokenOnForeclosure(tokenId, currentOwner);\n        state[tokenId] = StewardState.Foreclosed;\n\n        emit Foreclosure(currentOwner, timeLastCollectedPatron[currentOwner]);\n    }\n\n    function transferAssetTokenTo(\n        uint256 tokenId,\n        address _currentOwner,\n        address _newOwner,\n        uint256 _newPrice\n    ) internal {\n        require(_newPrice < 10000 ether, \"exceeds max price\");\n\n        uint256 scaledOldPrice = price[tokenId].mul(\n            patronageNumerator[tokenId]\n        );\n        uint256 scaledNewPrice = _newPrice.mul(patronageNumerator[tokenId]);\n\n        totalPatronOwnedTokenCost[_newOwner] = totalPatronOwnedTokenCost[_newOwner]\n            .add(scaledNewPrice);\n        totalPatronTokenGenerationRate[_newOwner] = totalPatronTokenGenerationRate[_newOwner]\n            .add(globalTokenGenerationRate);\n\n        address tokenBenefactor = benefactors[tokenId];\n        totalBenefactorTokenNumerator[tokenBenefactor] = totalBenefactorTokenNumerator[tokenBenefactor]\n            .add(scaledNewPrice);\n\n        if (_currentOwner != address(this) && _currentOwner != address(0)) {\n            totalPatronOwnedTokenCost[_currentOwner] = totalPatronOwnedTokenCost[_currentOwner]\n                .sub(scaledOldPrice);\n\n            totalPatronTokenGenerationRate[_currentOwner] = totalPatronTokenGenerationRate[_currentOwner]\n                .sub(globalTokenGenerationRate);\n\n            totalBenefactorTokenNumerator[tokenBenefactor] = totalBenefactorTokenNumerator[tokenBenefactor]\n                .sub(scaledOldPrice);\n        }\n\n        assetToken.transferFrom(_currentOwner, _newOwner, tokenId);\n\n        price[tokenId] = _newPrice;\n    }\n\n    function resetTokenOnForeclosure(uint256 tokenId, address _currentOwner)\n        internal\n    {\n        uint256 scaledPrice = price[tokenId].mul(patronageNumerator[tokenId]);\n\n        totalPatronOwnedTokenCost[_currentOwner] = totalPatronOwnedTokenCost[_currentOwner]\n            .sub(scaledPrice);\n\n        totalPatronTokenGenerationRate[_currentOwner] = totalPatronTokenGenerationRate[_currentOwner]\n            .sub((globalTokenGenerationRate));\n\n        address tokenBenefactor = benefactors[tokenId];\n        totalBenefactorTokenNumerator[tokenBenefactor] = totalBenefactorTokenNumerator[tokenBenefactor]\n            .sub(scaledPrice);\n\n        assetToken.transferFrom(_currentOwner, address(this), tokenId);\n    }\n\n    function versionRecipient()\n        external\n        virtual\n        override\n        view\n        returns (string memory)\n    {\n        return \"1.0\";\n    }\n}\n"
    },
    "vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/math/SafeMath.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/Initializable.sol": {
      "content": "pragma solidity >=0.4.24 <0.7.0;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n"
    },
    "contracts/ERC721Patronage_v1.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"./mod/ERC721.sol\";\nimport \"../vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/access/AccessControl.sol\";\nimport \"./GSNRecipientBase.sol\";\n\nimport \"../vendered/gsn-2.0.0-beta.1.3/contracts/interfaces/IKnowForwarderAddressGsn.sol\";\n\n// import \"./WildcardSteward_v1.sol\";\ncontract ERC721Patronage_v1 is\n    GSNRecipientBase,\n    ERC721UpgradeSafe,\n    AccessControlUpgradeSafe,\n    IKnowForwarderAddressGsn\n{\n    address public steward;\n    bytes32 public constant MINTER_ROLE = keccak256(\"minter\");\n    bytes32 public constant ADMIN_ROLE = keccak256(\"admin\");\n\n    event Init();\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    function _msgSender()\n        internal\n        override(ContextUpgradeSafe, GSNRecipientBase)\n        view\n        returns (address payable)\n    {\n        return GSNRecipientBase._msgSender();\n    }\n\n    function _msgData()\n        internal\n        override(ContextUpgradeSafe, GSNRecipientBase)\n        view\n        returns (bytes memory)\n    {\n        return GSNRecipientBase._msgData();\n    }\n\n    function setup(\n        address _steward,\n        string memory name,\n        string memory symbol,\n        address minter,\n        address admin\n    ) public initializer {\n        steward = _steward;\n        ERC721UpgradeSafe.__ERC721_init_unchained(name, symbol);\n        _setupRole(MINTER_ROLE, minter);\n        _setupRole(ADMIN_ROLE, admin);\n        _setRoleAdmin(MINTER_ROLE, ADMIN_ROLE);\n\n        GSNRecipientBase.initialize();\n\n        emit Init();\n    }\n\n    // function mint(address to, uint256) public {\n    //     require(hasRole(MINTER_ROLE, _msgSender()), \"Caller is not a minter\");\n    //     _mint(to, amount);\n    // }\n\n    function mintWithTokenURI(\n        address to,\n        uint256 tokenId,\n        string memory tokenURI\n    ) public returns (bool) {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"Caller is not a minter\");\n\n        _mint(to, tokenId);\n        _setTokenURI(tokenId, tokenURI);\n        return true;\n    }\n\n    function isMinter(address account) public view returns (bool) {\n        return hasRole(MINTER_ROLE, account);\n    }\n\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\n        internal\n        override\n        view\n        returns (bool)\n    {\n        return (spender == steward);\n        /*\n          // NOTE: temporarily disabling sending of the tokens independently. A protective messure since it isn't clear to users how this function should work.\n          //       Will re-add once a mechanism is agreed on by the community.\n          || ERC721._isApprovedOrOwner(spender, tokenId)\n          */\n    }\n\n    function addMinter(address minter) public {\n        require(hasRole(ADMIN_ROLE, _msgSender()), \"Caller not admin\");\n        grantRole(MINTER_ROLE, minter);\n\n        emit MinterAdded(minter);\n    }\n\n    function renounceMinter() public {\n        require(hasRole(ADMIN_ROLE, _msgSender()), \"Caller not admin\");\n        renounceRole(MINTER_ROLE, _msgSender());\n\n        emit MinterRemoved(_msgSender());\n    }\n\n    // function transferFrom(address from, address to, uint256 tokenId) public {\n    //     if (_msgSender() != steward) {\n    //         WildcardSteward_v1 stewardContract = WildcardSteward_v1(steward);\n\n    //         // Calculate remaining deposit for the two addresses involved in transfer.\n    //         stewardContract._collectPatronagePatron(to);\n    //         stewardContract._collectPatronage(tokenId);\n\n    //         // Do not allow someone to transfer a token if their deposit is Zero.\n    //         require(stewardContract.deposit(to) > 0, \"Recipient needs to have a deposit.\");\n    //         require(stewardContract.deposit(from) > 0, \"Sender deposit has run out.\");\n    //     }\n\n    //     ERC721.transferFrom(from, to, tokenId);\n    // }\n\n    function getTrustedForwarder() public override view returns (address) {\n        return trustedForwarder;\n    }\n\n    function setTrustedForwarder(address forwarder) public {\n        require(hasRole(ADMIN_ROLE, _msgSender()), \"Caller is not a admin\");\n\n        trustedForwarder = forwarder;\n    }\n}\n"
    },
    "contracts/mod/ERC721.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport \"../../vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/GSN/Context.sol\";\nimport \"../../vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/token/ERC721/IERC721.sol\";\nimport \"../../vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/token/ERC721/IERC721Metadata.sol\";\nimport \"../../vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/token/ERC721/IERC721Enumerable.sol\";\nimport \"../../vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"../../vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/introspection/ERC165.sol\";\nimport \"../../vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/math/SafeMath.sol\";\nimport \"../../vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/utils/Address.sol\";\nimport \"../../vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/utils/EnumerableSet.sol\";\nimport \"../../vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/utils/EnumerableMap.sol\";\nimport \"../../vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/utils/Strings.sol\";\nimport \"../../vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/Initializable.sol\";\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://eips.ethereum.org/EIPS/eip-721\n */\ncontract ERC721UpgradeSafe is\n    Initializable,\n    ContextUpgradeSafe,\n    ERC165UpgradeSafe,\n    IERC721,\n    IERC721Metadata,\n    IERC721Enumerable\n{\n    using SafeMath for uint256;\n    using Address for address;\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\n    using Strings for uint256;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from holder address to their (enumerable) set of owned tokens\n    mapping(address => EnumerableSet.UintSet) private _holderTokens;\n\n    // Enumerable mapping from token ids to their owners\n    EnumerableMap.UintToAddressMap private _tokenOwners;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    // Base URI\n    string private _baseURI;\n\n    /*\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n     *\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    /*\n     *     bytes4(keccak256('name()')) == 0x06fdde03\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\n     *\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n\n    /*\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\n     *\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n\n    function __ERC721_init(string memory name, string memory symbol)\n        internal\n        initializer\n    {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __ERC721_init_unchained(name, symbol);\n    }\n\n    function __ERC721_init_unchained(string memory name, string memory symbol)\n        internal\n        initializer\n    {\n        _name = name;\n        _symbol = symbol;\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param owner address to query the balance of\n     * @return uint256 representing the amount owned by the passed address\n     */\n    function balanceOf(address owner) public override view returns (uint256) {\n        require(\n            owner != address(0),\n            \"ERC721: balance query for the zero address\"\n        );\n\n        return _holderTokens[owner].length();\n    }\n\n    /**\n     * @dev Gets the owner of the specified token ID.\n     * @param tokenId uint256 ID of the token to query the owner of\n     * @return address currently marked as the owner of the given token ID\n     */\n    function ownerOf(uint256 tokenId) public override view returns (address) {\n        return\n            _tokenOwners.get(\n                tokenId,\n                \"ERC721: owner query for nonexistent token\"\n            );\n    }\n\n    /**\n     * @dev Gets the token name.\n     * @return string representing the token name\n     */\n    function name() public override view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Gets the token symbol.\n     * @return string representing the token symbol\n     */\n    function symbol() public override view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the URI for a given token ID. May return an empty string.\n     *\n     * If a base URI is set (via {_setBaseURI}), it is added as a prefix to the\n     * token's own URI (via {_setTokenURI}).\n     *\n     * If there is a base URI but no token URI, the token's ID will be used as\n     * its URI when appending it to the base URI. This pattern for autogenerated\n     * token URIs can lead to large gas savings.\n     *\n     * .Examples\n     * |===\n     * |`_setBaseURI()` |`_setTokenURI()` |`tokenURI()`\n     * | \"\"\n     * | \"\"\n     * | \"\"\n     * | \"\"\n     * | \"token.uri/123\"\n     * | \"token.uri/123\"\n     * | \"token.uri/\"\n     * | \"123\"\n     * | \"token.uri/123\"\n     * | \"token.uri/\"\n     * | \"\"\n     * | \"token.uri/<tokenId>\"\n     * |===\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function tokenURI(uint256 tokenId)\n        public\n        override\n        view\n        returns (string memory)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721Metadata: URI query for nonexistent token\"\n        );\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n\n        // If there is no base URI, return the token URI.\n        if (bytes(_baseURI).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(_baseURI, _tokenURI));\n        }\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\n        return string(abi.encodePacked(_baseURI, tokenId.toString()));\n    }\n\n    /**\n     * @dev Returns the base URI set via {_setBaseURI}. This will be\n     * automatically added as a prefix in {tokenURI} to each token's URI, or\n     * to the token ID if no specific URI is set for that token ID.\n     */\n    function baseURI() public view returns (string memory) {\n        return _baseURI;\n    }\n\n    /**\n     * @dev Gets the token ID at a given index of the tokens list of the requested owner.\n     * @param owner address owning the tokens list to be accessed\n     * @param index uint256 representing the index to be accessed of the requested tokens list\n     * @return uint256 token ID at the given index of the tokens list owned by the requested address\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index)\n        public\n        override\n        view\n        returns (uint256)\n    {\n        return _holderTokens[owner].at(index);\n    }\n\n    /**\n     * @dev Gets the total amount of tokens stored by the contract.\n     * @return uint256 representing the total amount of tokens\n     */\n    function totalSupply() public override view returns (uint256) {\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\n        return _tokenOwners.length();\n    }\n\n    /**\n     * @dev Gets the token ID at a given index of all the tokens in this contract\n     * Reverts if the index is greater or equal to the total number of tokens.\n     * @param index uint256 representing the index to be accessed of the tokens list\n     * @return uint256 token ID at the given index of the tokens list\n     */\n    function tokenByIndex(uint256 index)\n        public\n        override\n        view\n        returns (uint256)\n    {\n        (uint256 tokenId, ) = _tokenOwners.at(index);\n        return tokenId;\n    }\n\n    /**\n     * @dev Approves another address to transfer the given token ID\n     * The zero address indicates there is no approved address.\n     * There can only be one approved address per token at a given time.\n     * Can only be called by the token owner or an approved operator.\n     * @param to address to be approved for the given token ID\n     * @param tokenId uint256 ID of the token to be approved\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev Gets the approved address for a token ID, or zero if no address set\n     * Reverts if the token ID does not exist.\n     * @param tokenId uint256 ID of the token to query the approval of\n     * @return address currently approved for the given token ID\n     */\n    function getApproved(uint256 tokenId)\n        public\n        override\n        view\n        returns (address)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721: approved query for nonexistent token\"\n        );\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Sets or unsets the approval of a given operator\n     * An operator is allowed to transfer all tokens of the sender on their behalf.\n     * @param operator operator address to set the approval\n     * @param approved representing the status of the approval to be set\n     */\n    function setApprovalForAll(address operator, bool approved)\n        public\n        virtual\n        override\n    {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev Tells whether an operator is approved by a given owner.\n     * @param owner owner address which you want to query the approval of\n     * @param operator operator address which you want to query the approval of\n     * @return bool whether the given operator is approved by the given owner\n     */\n    function isApprovedForAll(address owner, address operator)\n        public\n        override\n        view\n        returns (bool)\n    {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Transfers the ownership of a given token ID to another address.\n     * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     * Requires the _msgSender() to be the owner, approved, or operator.\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(\n            _isApprovedOrOwner(_msgSender(), tokenId),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the _msgSender() to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement {IERC721Receiver-onERC721Received},\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the _msgSender() to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(\n            _isApprovedOrOwner(_msgSender(), tokenId),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers the ownership of a given token ID to another address\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * Requires the _msgSender() to be the owner, approved, or operator\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(\n            _checkOnERC721Received(from, to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Returns whether the specified token exists.\n     * @param tokenId uint256 ID of the token to query the existence of\n     * @return bool whether the token exists\n     */\n    function _exists(uint256 tokenId) internal view returns (bool) {\n        return _tokenOwners.contains(tokenId);\n    }\n\n    /**\n     * @dev Returns whether the given spender can transfer a given token ID.\n     * @param spender address of the spender to query\n     * @param tokenId uint256 ID of the token to be transferred\n     * @return bool whether the _msgSender() is approved for the given token ID,\n     * is an operator of the owner, or is the owner of the token\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\n        internal\n        virtual\n        view\n        returns (bool)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721: operator query for nonexistent token\"\n        );\n        address owner = ownerOf(tokenId);\n        return (spender == owner ||\n            getApproved(tokenId) == spender ||\n            isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Internal function to safely mint a new token.\n     * Reverts if the given token ID already exists.\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * @param to The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Internal function to safely mint a new token.\n     * Reverts if the given token ID already exists.\n     * If the target address is a contract, it must implement `onERC721Received`,\n     * which is called upon a safe transfer, and return the magic value\n     * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\n     * the transfer is reverted.\n     * @param to The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     * @param _data bytes data to send along with a safe transfer check\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Internal function to mint a new token.\n     * Reverts if the given token ID already exists.\n     * @param to The address that will own the minted token\n     * @param tokenId uint256 ID of the token to be minted\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to burn a specific token.\n     * Reverts if the token does not exist.\n     * @param tokenId uint256 ID of the token being burned\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        // Clear metadata (if any)\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n\n        _holderTokens[owner].remove(tokenId);\n\n        _tokenOwners.remove(tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Internal function to transfer ownership of a given token ID to another address.\n     * As opposed to {transferFrom}, this imposes no restrictions on _msgSender().\n     * @param from current owner of the token\n     * @param to address to receive the ownership of the given token ID\n     * @param tokenId uint256 ID of the token to be transferred\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(\n            ownerOf(tokenId) == from,\n            \"ERC721: transfer of token that is not own\"\n        );\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _holderTokens[from].remove(tokenId);\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to set the token URI for a given token.\n     *\n     * Reverts if the token ID does not exist.\n     *\n     * TIP: If all token IDs share a prefix (for example, if your URIs look like\n     * `https://api.myproject.com/token/<id>`), use {_setBaseURI} to store\n     * it and save gas.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI)\n        internal\n        virtual\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721Metadata: URI set of nonexistent token\"\n        );\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Internal function to set the base URI for all token IDs. It is\n     * automatically added as a prefix to the value returned in {tokenURI},\n     * or to the token ID if {tokenURI} is empty.\n     */\n    function _setBaseURI(string memory baseURI_) internal virtual {\n        _baseURI = baseURI_;\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (!to.isContract()) {\n            return true;\n        }\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = to.call(\n            abi.encodeWithSelector(\n                IERC721Receiver(to).onERC721Received.selector,\n                _msgSender(),\n                from,\n                tokenId,\n                _data\n            )\n        );\n        if (!success) {\n            if (returndata.length > 0) {\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n            }\n        } else {\n            bytes4 retval = abi.decode(returndata, (bytes4));\n            return (retval == _ERC721_RECEIVED);\n        }\n    }\n\n    function _approve(address to, uint256 tokenId) private {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - when `from` is zero, `tokenId` will be minted for `to`.\n     * - when `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    uint256[41] private __gap;\n}\n"
    },
    "vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/GSN/Context.sol": {
      "content": "pragma solidity ^0.6.0;\nimport \"../Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract ContextUpgradeSafe is Initializable {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n\n\n    }\n\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n\n    uint256[50] private __gap;\n}\n"
    },
    "vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/token/ERC721/IERC721.sol": {
      "content": "pragma solidity ^0.6.2;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of NFTs in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n    \n     * @dev Returns the owner of the NFT specified by `tokenId`.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n     * another (`to`).\n     *\n     *\n     *\n     * Requirements:\n     * - `from`, `to` cannot be zero.\n     * - `tokenId` must be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this\n     * NFT by either {approve} or {setApprovalForAll}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n    /**\n     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n     * another (`to`).\n     *\n     * Requirements:\n     * - If the caller is not `from`, it must be approved to move this NFT by\n     * either {approve} or {setApprovalForAll}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n    function approve(address to, uint256 tokenId) external;\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) external;\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
    },
    "vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/introspection/IERC165.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/token/ERC721/IERC721Metadata.sol": {
      "content": "pragma solidity ^0.6.2;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/token/ERC721/IERC721Enumerable.sol": {
      "content": "pragma solidity ^0.6.2;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    function totalSupply() external view returns (uint256);\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @notice Handle the receipt of an NFT\n     * @dev The ERC721 smart contract calls this function on the recipient\n     * after a {IERC721-safeTransferFrom}. This function MUST return the function selector,\n     * otherwise the caller will revert the transaction. The selector to be\n     * returned can be obtained as `this.onERC721Received.selector`. This\n     * function MAY throw to revert and reject the transfer.\n     * Note: the ERC721 contract address is always the message sender.\n     * @param operator The address which called `safeTransferFrom` function\n     * @param from The address which previously owned the token\n     * @param tokenId The NFT identifier which is being transferred\n     * @param data Additional data with no specified format\n     * @return bytes4 `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\n    external returns (bytes4);\n}\n"
    },
    "vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/introspection/ERC165.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport \"./IERC165.sol\";\nimport \"../Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\ncontract ERC165UpgradeSafe is Initializable, IERC165 {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n\n    function __ERC165_init() internal initializer {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal initializer {\n\n\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n\n    }\n\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n\n    uint256[49] private __gap;\n}\n"
    },
    "vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/utils/Address.sol": {
      "content": "pragma solidity ^0.6.2;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n"
    },
    "vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/utils/EnumerableSet.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\n * (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint256(_at(set._inner, index)));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/utils/EnumerableMap.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\n * supported.\n */\nlibrary EnumerableMap {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct MapEntry {\n        bytes32 _key;\n        bytes32 _value;\n    }\n\n    struct Map {\n        // Storage of map keys and values\n        MapEntry[] _entries;\n\n        // Position of the entry defined by a key in the `entries` array, plus 1\n        // because index 0 means a key is not in the map.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\n            map._entries.push(MapEntry({ _key: key, _value: value }));\n            // The entry is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            map._indexes[key] = map._entries.length;\n            return true;\n        } else {\n            map._entries[keyIndex - 1]._value = value;\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = keyIndex - 1;\n            uint256 lastIndex = map._entries.length - 1;\n\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            MapEntry storage lastEntry = map._entries[lastIndex];\n\n            // Move the last entry to the index where the entry to delete is\n            map._entries[toDeleteIndex] = lastEntry;\n            // Update the index for the moved entry\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved entry was stored\n            map._entries.pop();\n\n            // Delete the index for the deleted slot\n            delete map._indexes[key];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\n        return map._indexes[key] != 0;\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function _length(Map storage map) private view returns (uint256) {\n        return map._entries.length;\n    }\n\n   /**\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n    *\n    * Note that there are no guarantees on the ordering of entries inside the\n    * array, and it may change when more entries are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\n        require(map._entries.length > index, \"EnumerableMap: index out of bounds\");\n\n        MapEntry storage entry = map._entries[index];\n        return (entry._key, entry._value);\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n        return _get(map, key, \"EnumerableMap: nonexistent key\");\n    }\n\n    /**\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n     */\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\n        return _set(map._inner, bytes32(key), bytes32(uint256(value)));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return _remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return _contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n   /**\n    * @dev Returns the element stored at position `index` in the set. O(1).\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\n        return (uint256(key), address(uint256(value)));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint256(_get(map._inner, bytes32(key))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\n        return address(uint256(_get(map._inner, bytes32(key), errorMessage)));\n    }\n}\n"
    },
    "vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/utils/Strings.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        uint256 index = digits - 1;\n        temp = value;\n        while (temp != 0) {\n            buffer[index--] = byte(uint8(48 + temp % 10));\n            temp /= 10;\n        }\n        return string(buffer);\n    }\n}\n"
    },
    "vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/access/AccessControl.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport \"../utils/EnumerableSet.sol\";\nimport \"../utils/Address.sol\";\nimport \"../GSN/Context.sol\";\nimport \"../Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, _msgSender()));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n */\nabstract contract AccessControlUpgradeSafe is Initializable, ContextUpgradeSafe {\n    function __AccessControl_init() internal initializer {\n        __Context_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal initializer {\n\n\n    }\n\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Address for address;\n\n    struct RoleData {\n        EnumerableSet.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/GSNRecipientBase.sol": {
      "content": "import \"../vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/GSN/Context.sol\";\nimport \"../vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/GSN/GSNRecipient.sol\";\nimport \"../vendered/gsn-2.0.0-beta.1.3/contracts/utils/MinLibBytes.sol\";\n\ncontract GSNRecipientBase is ContextUpgradeSafe, GSNRecipientUpgradeSafe {\n    function initialize() public {\n        __GSNRecipient_init();\n    }\n\n    /*\n     * Forwarder singleton we accept calls from\n     */\n    address internal trustedForwarder;\n\n    // This function is copy/pasted from the gsn library...\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\n        return forwarder == trustedForwarder;\n    }\n\n    function acceptRelayedCall(\n        address relay,\n        address from,\n        bytes calldata encodedFunction,\n        uint256 transactionFee,\n        uint256 gasPrice,\n        uint256 gasLimit,\n        uint256 nonce,\n        bytes calldata approvalData,\n        uint256 maxPossibleCharge\n    ) external override view returns (uint256, bytes memory) {\n        // TODO: be more strict here!\n        //       https://docs.openzeppelin.com/contracts/3.x/gsn-strategies\n        return _approveRelayedCall();\n    }\n\n    // We won't do any pre or post processing, so leave _preRelayedCall and _postRelayedCall empty\n    function _preRelayedCall(bytes memory context)\n        internal\n        override\n        returns (bytes32)\n    {}\n\n    function _postRelayedCall(\n        bytes memory context,\n        bool,\n        uint256 actualCharge,\n        bytes32\n    ) internal override {}\n\n    // function _msgSender()\n    //     internal\n    //     virtual\n    //     view\n    //     returns (address payable)\n    // {\n    //     return GSNRecipientUpgradeSafe._msgSender();\n    // }\n\n    /**\n     * return the sender of this call.\n     * if the call came through our trusted forwarder, return the original sender.\n     * otherwise, return `msg.sender`.\n     * should be used in the contract anywhere instead of msg.sender\n     */\n    function _msgSender()\n        internal\n        virtual\n        override(ContextUpgradeSafe, GSNRecipientUpgradeSafe)\n        view\n        returns (address payable)\n    {\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\n            // At this point we know that the sender is a trusted forwarder,\n            // so we trust that the last bytes of msg.data are the verified sender address.\n            // extract sender address from the end of msg.data\n            return\n                address(\n                    uint160(\n                        MinLibBytes.readAddress(msg.data, msg.data.length - 20)\n                    )\n                );\n        }\n        return msg.sender;\n    }\n\n    function _msgData()\n        internal\n        virtual\n        override(ContextUpgradeSafe, GSNRecipientUpgradeSafe)\n        view\n        returns (bytes memory)\n    {\n        return GSNRecipientUpgradeSafe._msgData();\n    }\n}\n"
    },
    "vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/GSN/GSNRecipient.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport \"./IRelayRecipient.sol\";\nimport \"./IRelayHub.sol\";\nimport \"./Context.sol\";\nimport \"../Initializable.sol\";\n\n/**\n * @dev Base GSN recipient contract: includes the {IRelayRecipient} interface\n * and enables GSN support on all contracts in the inheritance tree.\n *\n * TIP: This contract is abstract. The functions {IRelayRecipient-acceptRelayedCall},\n *  {_preRelayedCall}, and {_postRelayedCall} are not implemented and must be\n * provided by derived contracts. See the\n * xref:ROOT:gsn-strategies.adoc#gsn-strategies[GSN strategies] for more\n * information on how to use the pre-built {GSNRecipientSignature} and\n * {GSNRecipientERC20Fee}, or how to write your own.\n */\nabstract contract GSNRecipientUpgradeSafe is Initializable, IRelayRecipient, ContextUpgradeSafe {\n    function __GSNRecipient_init() internal initializer {\n        __Context_init_unchained();\n        __GSNRecipient_init_unchained();\n    }\n\n    function __GSNRecipient_init_unchained() internal initializer {\n\n        _relayHub = 0xD216153c06E857cD7f72665E0aF1d7D82172F494;\n\n    }\n\n    // Default RelayHub address, deployed on mainnet and all testnets at the same address\n    address private _relayHub ;\n\n    uint256 constant private _RELAYED_CALL_ACCEPTED = 0;\n    uint256 constant private _RELAYED_CALL_REJECTED = 11;\n\n    // How much gas is forwarded to postRelayedCall\n    uint256 constant internal _POST_RELAYED_CALL_MAX_GAS = 100000;\n\n    /**\n     * @dev Emitted when a contract changes its {IRelayHub} contract to a new one.\n     */\n    event RelayHubChanged(address indexed oldRelayHub, address indexed newRelayHub);\n\n    /**\n     * @dev Returns the address of the {IRelayHub} contract for this recipient.\n     */\n    function getHubAddr() public view override returns (address) {\n        return _relayHub;\n    }\n\n    /**\n     * @dev Switches to a new {IRelayHub} instance. This method is added for future-proofing: there's no reason to not\n     * use the default instance.\n     *\n     * IMPORTANT: After upgrading, the {GSNRecipient} will no longer be able to receive relayed calls from the old\n     * {IRelayHub} instance. Additionally, all funds should be previously withdrawn via {_withdrawDeposits}.\n     */\n    function _upgradeRelayHub(address newRelayHub) internal virtual {\n        address currentRelayHub = _relayHub;\n        require(newRelayHub != address(0), \"GSNRecipient: new RelayHub is the zero address\");\n        require(newRelayHub != currentRelayHub, \"GSNRecipient: new RelayHub is the current one\");\n\n        emit RelayHubChanged(currentRelayHub, newRelayHub);\n\n        _relayHub = newRelayHub;\n    }\n\n    /**\n     * @dev Returns the version string of the {IRelayHub} for which this recipient implementation was built. If\n     * {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version.\n     */\n    // This function is view for future-proofing, it may require reading from\n    // storage in the future.\n    function relayHubVersion() public view returns (string memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return \"1.0.0\";\n    }\n\n    /**\n     * @dev Withdraws the recipient's deposits in `RelayHub`.\n     *\n     * Derived contracts should expose this in an external interface with proper access control.\n     */\n    function _withdrawDeposits(uint256 amount, address payable payee) internal virtual {\n        IRelayHub(_relayHub).withdraw(amount, payee);\n    }\n\n    // Overrides for Context's functions: when called from RelayHub, sender and\n    // data require some pre-processing: the actual sender is stored at the end\n    // of the call data, which in turns means it needs to be removed from it\n    // when handling said data.\n\n    /**\n     * @dev Replacement for msg.sender. Returns the actual sender of a transaction: msg.sender for regular transactions,\n     * and the end-user for GSN relayed calls (where msg.sender is actually `RelayHub`).\n     *\n     * IMPORTANT: Contracts derived from {GSNRecipient} should never use `msg.sender`, and use {_msgSender} instead.\n     */\n    function _msgSender() internal view virtual override returns (address payable) {\n        if (msg.sender != _relayHub) {\n            return msg.sender;\n        } else {\n            return _getRelayedCallSender();\n        }\n    }\n\n    /**\n     * @dev Replacement for msg.data. Returns the actual calldata of a transaction: msg.data for regular transactions,\n     * and a reduced version for GSN relayed calls (where msg.data contains additional information).\n     *\n     * IMPORTANT: Contracts derived from {GSNRecipient} should never use `msg.data`, and use {_msgData} instead.\n     */\n    function _msgData() internal view virtual override returns (bytes memory) {\n        if (msg.sender != _relayHub) {\n            return msg.data;\n        } else {\n            return _getRelayedCallData();\n        }\n    }\n\n    // Base implementations for pre and post relayedCall: only RelayHub can invoke them, and data is forwarded to the\n    // internal hook.\n\n    /**\n     * @dev See `IRelayRecipient.preRelayedCall`.\n     *\n     * This function should not be overriden directly, use `_preRelayedCall` instead.\n     *\n     * * Requirements:\n     *\n     * - the caller must be the `RelayHub` contract.\n     */\n    function preRelayedCall(bytes memory context) public virtual override returns (bytes32) {\n        require(msg.sender == getHubAddr(), \"GSNRecipient: caller is not RelayHub\");\n        return _preRelayedCall(context);\n    }\n\n    /**\n     * @dev See `IRelayRecipient.preRelayedCall`.\n     *\n     * Called by `GSNRecipient.preRelayedCall`, which asserts the caller is the `RelayHub` contract. Derived contracts\n     * must implement this function with any relayed-call preprocessing they may wish to do.\n     *\n     */\n    function _preRelayedCall(bytes memory context) internal virtual returns (bytes32);\n\n    /**\n     * @dev See `IRelayRecipient.postRelayedCall`.\n     *\n     * This function should not be overriden directly, use `_postRelayedCall` instead.\n     *\n     * * Requirements:\n     *\n     * - the caller must be the `RelayHub` contract.\n     */\n    function postRelayedCall(bytes memory context, bool success, uint256 actualCharge, bytes32 preRetVal) public virtual override {\n        require(msg.sender == getHubAddr(), \"GSNRecipient: caller is not RelayHub\");\n        _postRelayedCall(context, success, actualCharge, preRetVal);\n    }\n\n    /**\n     * @dev See `IRelayRecipient.postRelayedCall`.\n     *\n     * Called by `GSNRecipient.postRelayedCall`, which asserts the caller is the `RelayHub` contract. Derived contracts\n     * must implement this function with any relayed-call postprocessing they may wish to do.\n     *\n     */\n    function _postRelayedCall(bytes memory context, bool success, uint256 actualCharge, bytes32 preRetVal) internal virtual;\n\n    /**\n     * @dev Return this in acceptRelayedCall to proceed with the execution of a relayed call. Note that this contract\n     * will be charged a fee by RelayHub\n     */\n    function _approveRelayedCall() internal pure returns (uint256, bytes memory) {\n        return _approveRelayedCall(\"\");\n    }\n\n    /**\n     * @dev See `GSNRecipient._approveRelayedCall`.\n     *\n     * This overload forwards `context` to _preRelayedCall and _postRelayedCall.\n     */\n    function _approveRelayedCall(bytes memory context) internal pure returns (uint256, bytes memory) {\n        return (_RELAYED_CALL_ACCEPTED, context);\n    }\n\n    /**\n     * @dev Return this in acceptRelayedCall to impede execution of a relayed call. No fees will be charged.\n     */\n    function _rejectRelayedCall(uint256 errorCode) internal pure returns (uint256, bytes memory) {\n        return (_RELAYED_CALL_REJECTED + errorCode, \"\");\n    }\n\n    /*\n     * @dev Calculates how much RelayHub will charge a recipient for using `gas` at a `gasPrice`, given a relayer's\n     * `serviceFee`.\n     */\n    function _computeCharge(uint256 gas, uint256 gasPrice, uint256 serviceFee) internal pure returns (uint256) {\n        // The fee is expressed as a percentage. E.g. a value of 40 stands for a 40% fee, so the recipient will be\n        // charged for 1.4 times the spent amount.\n        return (gas * gasPrice * (100 + serviceFee)) / 100;\n    }\n\n    function _getRelayedCallSender() private pure returns (address payable result) {\n        // We need to read 20 bytes (an address) located at array index msg.data.length - 20. In memory, the array\n        // is prefixed with a 32-byte length value, so we first add 32 to get the memory read index. However, doing\n        // so would leave the address in the upper 20 bytes of the 32-byte word, which is inconvenient and would\n        // require bit shifting. We therefore subtract 12 from the read index so the address lands on the lower 20\n        // bytes. This can always be done due to the 32-byte prefix.\n\n        // The final memory read index is msg.data.length - 20 + 32 - 12 = msg.data.length. Using inline assembly is the\n        // easiest/most-efficient way to perform this operation.\n\n        // These fields are not accessible from assembly\n        bytes memory array = msg.data;\n        uint256 index = msg.data.length;\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\n            result := and(mload(add(array, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    function _getRelayedCallData() private pure returns (bytes memory) {\n        // RelayHub appends the sender address at the end of the calldata, so in order to retrieve the actual msg.data,\n        // we must strip the last 20 bytes (length of an address type) from it.\n\n        uint256 actualDataLength = msg.data.length - 20;\n        bytes memory actualData = new bytes(actualDataLength);\n\n        for (uint256 i = 0; i < actualDataLength; ++i) {\n            actualData[i] = msg.data[i];\n        }\n\n        return actualData;\n    }\n\n    uint256[49] private __gap;\n}\n"
    },
    "vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/GSN/IRelayRecipient.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev Base interface for a contract that will be called via the GSN from {IRelayHub}.\n *\n * TIP: You don't need to write an implementation yourself! Inherit from {GSNRecipient} instead.\n */\ninterface IRelayRecipient {\n    /**\n     * @dev Returns the address of the {IRelayHub} instance this recipient interacts with.\n     */\n    function getHubAddr() external view returns (address);\n\n    /**\n     * @dev Called by {IRelayHub} to validate if this recipient accepts being charged for a relayed call. Note that the\n     * recipient will be charged regardless of the execution result of the relayed call (i.e. if it reverts or not).\n     *\n     * The relay request was originated by `from` and will be served by `relay`. `encodedFunction` is the relayed call\n     * calldata, so its first four bytes are the function selector. The relayed call will be forwarded `gasLimit` gas,\n     * and the transaction executed with a gas price of at least `gasPrice`. ``relay``'s fee is `transactionFee`, and the\n     * recipient will be charged at most `maxPossibleCharge` (in wei). `nonce` is the sender's (`from`) nonce for\n     * replay attack protection in {IRelayHub}, and `approvalData` is a optional parameter that can be used to hold a signature\n     * over all or some of the previous values.\n     *\n     * Returns a tuple, where the first value is used to indicate approval (0) or rejection (custom non-zero error code,\n     * values 1 to 10 are reserved) and the second one is data to be passed to the other {IRelayRecipient} functions.\n     *\n     * {acceptRelayedCall} is called with 50k gas: if it runs out during execution, the request will be considered\n     * rejected. A regular revert will also trigger a rejection.\n     */\n    function acceptRelayedCall(\n        address relay,\n        address from,\n        bytes calldata encodedFunction,\n        uint256 transactionFee,\n        uint256 gasPrice,\n        uint256 gasLimit,\n        uint256 nonce,\n        bytes calldata approvalData,\n        uint256 maxPossibleCharge\n    )\n        external\n        view\n        returns (uint256, bytes memory);\n\n    /**\n     * @dev Called by {IRelayHub} on approved relay call requests, before the relayed call is executed. This allows to e.g.\n     * pre-charge the sender of the transaction.\n     *\n     * `context` is the second value returned in the tuple by {acceptRelayedCall}.\n     *\n     * Returns a value to be passed to {postRelayedCall}.\n     *\n     * {preRelayedCall} is called with 100k gas: if it runs out during exection or otherwise reverts, the relayed call\n     * will not be executed, but the recipient will still be charged for the transaction's cost.\n     */\n    function preRelayedCall(bytes calldata context) external returns (bytes32);\n\n    /**\n     * @dev Called by {IRelayHub} on approved relay call requests, after the relayed call is executed. This allows to e.g.\n     * charge the user for the relayed call costs, return any overcharges from {preRelayedCall}, or perform\n     * contract-specific bookkeeping.\n     *\n     * `context` is the second value returned in the tuple by {acceptRelayedCall}. `success` is the execution status of\n     * the relayed call. `actualCharge` is an estimate of how much the recipient will be charged for the transaction,\n     * not including any gas used by {postRelayedCall} itself. `preRetVal` is {preRelayedCall}'s return value.\n     *\n     *\n     * {postRelayedCall} is called with 100k gas: if it runs out during execution or otherwise reverts, the relayed call\n     * and the call to {preRelayedCall} will be reverted retroactively, but the recipient will still be charged for the\n     * transaction's cost.\n     */\n    function postRelayedCall(bytes calldata context, bool success, uint256 actualCharge, bytes32 preRetVal) external;\n}\n"
    },
    "vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/GSN/IRelayHub.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev Interface for `RelayHub`, the core contract of the GSN. Users should not need to interact with this contract\n * directly.\n *\n * See the https://github.com/OpenZeppelin/openzeppelin-gsn-helpers[OpenZeppelin GSN helpers] for more information on\n * how to deploy an instance of `RelayHub` on your local test network.\n */\ninterface IRelayHub {\n    // Relay management\n\n    /**\n     * @dev Adds stake to a relay and sets its `unstakeDelay`. If the relay does not exist, it is created, and the caller\n     * of this function becomes its owner. If the relay already exists, only the owner can call this function. A relay\n     * cannot be its own owner.\n     *\n     * All Ether in this function call will be added to the relay's stake.\n     * Its unstake delay will be assigned to `unstakeDelay`, but the new value must be greater or equal to the current one.\n     *\n     * Emits a {Staked} event.\n     */\n    function stake(address relayaddr, uint256 unstakeDelay) external payable;\n\n    /**\n     * @dev Emitted when a relay's stake or unstakeDelay are increased\n     */\n    event Staked(address indexed relay, uint256 stake, uint256 unstakeDelay);\n\n    /**\n     * @dev Registers the caller as a relay.\n     * The relay must be staked for, and not be a contract (i.e. this function must be called directly from an EOA).\n     *\n     * This function can be called multiple times, emitting new {RelayAdded} events. Note that the received\n     * `transactionFee` is not enforced by {relayCall}.\n     *\n     * Emits a {RelayAdded} event.\n     */\n    function registerRelay(uint256 transactionFee, string calldata url) external;\n\n    /**\n     * @dev Emitted when a relay is registered or re-registerd. Looking at these events (and filtering out\n     * {RelayRemoved} events) lets a client discover the list of available relays.\n     */\n    event RelayAdded(address indexed relay, address indexed owner, uint256 transactionFee, uint256 stake, uint256 unstakeDelay, string url);\n\n    /**\n     * @dev Removes (deregisters) a relay. Unregistered (but staked for) relays can also be removed.\n     *\n     * Can only be called by the owner of the relay. After the relay's `unstakeDelay` has elapsed, {unstake} will be\n     * callable.\n     *\n     * Emits a {RelayRemoved} event.\n     */\n    function removeRelayByOwner(address relay) external;\n\n    /**\n     * @dev Emitted when a relay is removed (deregistered). `unstakeTime` is the time when unstake will be callable.\n     */\n    event RelayRemoved(address indexed relay, uint256 unstakeTime);\n\n    /** Deletes the relay from the system, and gives back its stake to the owner.\n     *\n     * Can only be called by the relay owner, after `unstakeDelay` has elapsed since {removeRelayByOwner} was called.\n     *\n     * Emits an {Unstaked} event.\n     */\n    function unstake(address relay) external;\n\n    /**\n     * @dev Emitted when a relay is unstaked for, including the returned stake.\n     */\n    event Unstaked(address indexed relay, uint256 stake);\n\n    // States a relay can be in\n    enum RelayState {\n        Unknown, // The relay is unknown to the system: it has never been staked for\n        Staked, // The relay has been staked for, but it is not yet active\n        Registered, // The relay has registered itself, and is active (can relay calls)\n        Removed    // The relay has been removed by its owner and can no longer relay calls. It must wait for its unstakeDelay to elapse before it can unstake\n    }\n\n    /**\n     * @dev Returns a relay's status. Note that relays can be deleted when unstaked or penalized, causing this function\n     * to return an empty entry.\n     */\n    function getRelay(address relay) external view returns (uint256 totalStake, uint256 unstakeDelay, uint256 unstakeTime, address payable owner, RelayState state);\n\n    // Balance management\n\n    /**\n     * @dev Deposits Ether for a contract, so that it can receive (and pay for) relayed transactions.\n     *\n     * Unused balance can only be withdrawn by the contract itself, by calling {withdraw}.\n     *\n     * Emits a {Deposited} event.\n     */\n    function depositFor(address target) external payable;\n\n    /**\n     * @dev Emitted when {depositFor} is called, including the amount and account that was funded.\n     */\n    event Deposited(address indexed recipient, address indexed from, uint256 amount);\n\n    /**\n     * @dev Returns an account's deposits. These can be either a contracts's funds, or a relay owner's revenue.\n     */\n    function balanceOf(address target) external view returns (uint256);\n\n    /**\n     * Withdraws from an account's balance, sending it back to it. Relay owners call this to retrieve their revenue, and\n     * contracts can use it to reduce their funding.\n     *\n     * Emits a {Withdrawn} event.\n     */\n    function withdraw(uint256 amount, address payable dest) external;\n\n    /**\n     * @dev Emitted when an account withdraws funds from `RelayHub`.\n     */\n    event Withdrawn(address indexed account, address indexed dest, uint256 amount);\n\n    // Relaying\n\n    /**\n     * @dev Checks if the `RelayHub` will accept a relayed operation.\n     * Multiple things must be true for this to happen:\n     *  - all arguments must be signed for by the sender (`from`)\n     *  - the sender's nonce must be the current one\n     *  - the recipient must accept this transaction (via {acceptRelayedCall})\n     *\n     * Returns a `PreconditionCheck` value (`OK` when the transaction can be relayed), or a recipient-specific error\n     * code if it returns one in {acceptRelayedCall}.\n     */\n    function canRelay(\n        address relay,\n        address from,\n        address to,\n        bytes calldata encodedFunction,\n        uint256 transactionFee,\n        uint256 gasPrice,\n        uint256 gasLimit,\n        uint256 nonce,\n        bytes calldata signature,\n        bytes calldata approvalData\n    ) external view returns (uint256 status, bytes memory recipientContext);\n\n    // Preconditions for relaying, checked by canRelay and returned as the corresponding numeric values.\n    enum PreconditionCheck {\n        OK,                         // All checks passed, the call can be relayed\n        WrongSignature,             // The transaction to relay is not signed by requested sender\n        WrongNonce,                 // The provided nonce has already been used by the sender\n        AcceptRelayedCallReverted,  // The recipient rejected this call via acceptRelayedCall\n        InvalidRecipientStatusCode  // The recipient returned an invalid (reserved) status code\n    }\n\n    /**\n     * @dev Relays a transaction.\n     *\n     * For this to succeed, multiple conditions must be met:\n     *  - {canRelay} must `return PreconditionCheck.OK`\n     *  - the sender must be a registered relay\n     *  - the transaction's gas price must be larger or equal to the one that was requested by the sender\n     *  - the transaction must have enough gas to not run out of gas if all internal transactions (calls to the\n     * recipient) use all gas available to them\n     *  - the recipient must have enough balance to pay the relay for the worst-case scenario (i.e. when all gas is\n     * spent)\n     *\n     * If all conditions are met, the call will be relayed and the recipient charged. {preRelayedCall}, the encoded\n     * function and {postRelayedCall} will be called in that order.\n     *\n     * Parameters:\n     *  - `from`: the client originating the request\n     *  - `to`: the target {IRelayRecipient} contract\n     *  - `encodedFunction`: the function call to relay, including data\n     *  - `transactionFee`: fee (%) the relay takes over actual gas cost\n     *  - `gasPrice`: gas price the client is willing to pay\n     *  - `gasLimit`: gas to forward when calling the encoded function\n     *  - `nonce`: client's nonce\n     *  - `signature`: client's signature over all previous params, plus the relay and RelayHub addresses\n     *  - `approvalData`: dapp-specific data forwared to {acceptRelayedCall}. This value is *not* verified by the\n     * `RelayHub`, but it still can be used for e.g. a signature.\n     *\n     * Emits a {TransactionRelayed} event.\n     */\n    function relayCall(\n        address from,\n        address to,\n        bytes calldata encodedFunction,\n        uint256 transactionFee,\n        uint256 gasPrice,\n        uint256 gasLimit,\n        uint256 nonce,\n        bytes calldata signature,\n        bytes calldata approvalData\n    ) external;\n\n    /**\n     * @dev Emitted when an attempt to relay a call failed.\n     *\n     * This can happen due to incorrect {relayCall} arguments, or the recipient not accepting the relayed call. The\n     * actual relayed call was not executed, and the recipient not charged.\n     *\n     * The `reason` parameter contains an error code: values 1-10 correspond to `PreconditionCheck` entries, and values\n     * over 10 are custom recipient error codes returned from {acceptRelayedCall}.\n     */\n    event CanRelayFailed(address indexed relay, address indexed from, address indexed to, bytes4 selector, uint256 reason);\n\n    /**\n     * @dev Emitted when a transaction is relayed.\n     * Useful when monitoring a relay's operation and relayed calls to a contract\n     *\n     * Note that the actual encoded function might be reverted: this is indicated in the `status` parameter.\n     *\n     * `charge` is the Ether value deducted from the recipient's balance, paid to the relay's owner.\n     */\n    event TransactionRelayed(address indexed relay, address indexed from, address indexed to, bytes4 selector, RelayCallStatus status, uint256 charge);\n\n    // Reason error codes for the TransactionRelayed event\n    enum RelayCallStatus {\n        OK,                      // The transaction was successfully relayed and execution successful - never included in the event\n        RelayedCallFailed,       // The transaction was relayed, but the relayed call failed\n        PreRelayedFailed,        // The transaction was not relayed due to preRelatedCall reverting\n        PostRelayedFailed,       // The transaction was relayed and reverted due to postRelatedCall reverting\n        RecipientBalanceChanged  // The transaction was relayed and reverted due to the recipient's balance changing\n    }\n\n    /**\n     * @dev Returns how much gas should be forwarded to a call to {relayCall}, in order to relay a transaction that will\n     * spend up to `relayedCallStipend` gas.\n     */\n    function requiredGas(uint256 relayedCallStipend) external view returns (uint256);\n\n    /**\n     * @dev Returns the maximum recipient charge, given the amount of gas forwarded, gas price and relay fee.\n     */\n    function maxPossibleCharge(uint256 relayedCallStipend, uint256 gasPrice, uint256 transactionFee) external view returns (uint256);\n\n     // Relay penalization.\n     // Any account can penalize relays, removing them from the system immediately, and rewarding the\n    // reporter with half of the relay's stake. The other half is burned so that, even if the relay penalizes itself, it\n    // still loses half of its stake.\n\n    /**\n     * @dev Penalize a relay that signed two transactions using the same nonce (making only the first one valid) and\n     * different data (gas price, gas limit, etc. may be different).\n     *\n     * The (unsigned) transaction data and signature for both transactions must be provided.\n     */\n    function penalizeRepeatedNonce(bytes calldata unsignedTx1, bytes calldata signature1, bytes calldata unsignedTx2, bytes calldata signature2) external;\n\n    /**\n     * @dev Penalize a relay that sent a transaction that didn't target ``RelayHub``'s {registerRelay} or {relayCall}.\n     */\n    function penalizeIllegalTransaction(bytes calldata unsignedTx, bytes calldata signature) external;\n\n    /**\n     * @dev Emitted when a relay is penalized.\n     */\n    event Penalized(address indexed relay, address sender, uint256 amount);\n\n    /**\n     * @dev Returns an account's nonce in `RelayHub`.\n     */\n    function getNonce(address from) external view returns (uint256);\n}\n\n"
    },
    "vendered/gsn-2.0.0-beta.1.3/contracts/utils/MinLibBytes.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// minimal bytes manipulation required by GSN\n// a minimal subset from 0x/LibBytes\n/* solhint-disable no-inline-assembly */\npragma solidity ^0.6.2;\n\nlibrary MinLibBytes {\n\n    //truncate the given parameter (in-place) if its length is above the given maximum length\n    // do nothing otherwise.\n    //NOTE: solidity warns unless the method is marked \"pure\", but it DOES modify its parameter.\n    function truncateInPlace(bytes memory data, uint256 maxlen) internal pure {\n        if (data.length > maxlen) {\n            assembly { mstore(data, maxlen) }\n        }\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        require (b.length >= index + 20, \"readAddress: data too short\");\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        require(b.length >= index + 32, \"readBytes32: data too short\" );\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, add(index,32)))\n        }\n        return result;\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        require(b.length >= index + 4, \"readBytes4: data too short\");\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, add(index,32)))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n}\n"
    },
    "vendered/gsn-2.0.0-beta.1.3/contracts/interfaces/IKnowForwarderAddressGsn.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.6.2;\n\ninterface IKnowForwarderAddressGsn {\n    /**\n     * return the forwarder we trust to forward relayed transactions to us.\n     * the forwarder is required to verify the sender's signature, and verify\n     * the call is not a replay.\n     */\n    function getTrustedForwarder() external view returns (address);\n}\n"
    },
    "contracts/interfaces/IMintManager.sol": {
      "content": "pragma solidity ^0.6.0;\n\ninterface IMintManager {\n    function tokenMint(\n        address receiverOfTokens,\n        uint256 time,\n        uint256 mintRate\n    ) external;\n}\n"
    },
    "contracts/interfaces/IERC721Patronage.sol": {
      "content": "pragma solidity ^0.6.0;\n\ninterface IERC721Patronage {\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    function mintWithTokenURI(\n        address to,\n        uint256 tokenId,\n        string memory tokenURI\n    ) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n}\n"
    },
    "contracts/interfaces/IERC20Mintable.sol": {
      "content": "pragma solidity ^0.6.0;\n\ninterface IERC20Mintable {\n    function mint(address account, uint256 amount) external;\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external virtual returns (bool);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        virtual\n        returns (bool);\n\n    function balanceOf(address account) external virtual view returns (uint256);\n}\n"
    },
    "vendered/gsn-2.0.0-beta.1.3/contracts/BaseRelayRecipient.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.6.2;\n\nimport \"./utils/MinLibBytes.sol\";\n\nimport \"./interfaces/IRelayRecipientGsn.sol\";\n\n/**\n * A base contract to be inherited by any contract that want to receive relayed transactions\n * A subclass must use \"_msgSender()\" instead of \"msg.sender\"\n */\nabstract contract BaseRelayRecipient is IRelayRecipientGsn {\n    /*\n     * Forwarder singleton we accept calls from\n     */\n    address internal trustedForwarder;\n\n    function isTrustedForwarder(address forwarder)\n        public\n        override\n        view\n        returns (bool)\n    {\n        return forwarder == trustedForwarder;\n    }\n\n    /**\n     * return the sender of this call.\n     * if the call came through our trusted forwarder, return the original sender.\n     * otherwise, return `msg.sender`.\n     * should be used in the contract anywhere instead of msg.sender\n     */\n    function _msgSender()\n        internal\n        virtual\n        override\n        view\n        returns (address payable)\n    {\n        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\n            // At this point we know that the sender is a trusted forwarder,\n            // so we trust that the last bytes of msg.data are the verified sender address.\n            // extract sender address from the end of msg.data\n            return\n                address(\n                    uint160(\n                        MinLibBytes.readAddress(msg.data, msg.data.length - 20)\n                    )\n                );\n        }\n        return msg.sender;\n    }\n}\n"
    },
    "vendered/gsn-2.0.0-beta.1.3/contracts/interfaces/IRelayRecipientGsn.sol": {
      "content": "// SPDX-License-Identifier:MIT\npragma solidity ^0.6.2;\n\n/**\n * a contract must implement this interface in order to support relayed transaction.\n * It is better to inherit the BaseRelayRecipient as its implementation.\n */\nabstract contract IRelayRecipientGsn {\n    /**\n     * return if the forwarder is trusted to forward relayed transactions to us.\n     * the forwarder is required to verify the sender's signature, and verify\n     * the call is not a replay.\n     */\n    function isTrustedForwarder(address forwarder)\n        public\n        virtual\n        view\n        returns (bool);\n\n    /**\n     * return the sender of this call.\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\n     * of the msg.data.\n     * otherwise, return `msg.sender`\n     * should be used in the contract anywhere instead of msg.sender\n     */\n    function _msgSender() internal virtual view returns (address payable);\n\n    function versionRecipient() external virtual view returns (string memory);\n}\n"
    },
    "contracts/BasicMetaTransaction.sol": {
      "content": "pragma solidity ^0.6.0;\n\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\n// import \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\";\nimport \"../vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/math/SafeMath.sol\";\n\ncontract BasicMetaTransaction {\n    using SafeMath for uint256;\n\n    event MetaTransactionExecuted(\n        address userAddress,\n        address payable relayerAddress,\n        bytes functionSignature\n    );\n    mapping(address => uint256) private nonces;\n    // uint256 public chainId;\n    uint256[100] private ______gap; // put a gap for flexibility in the future\n\n    // function setChainID public {\n    //   reuire(chainId == 0);\n\n    //   chainId =\n    // }\n    function getChainID() public pure returns (uint256) {\n        uint256 id;\n        assembly {\n            id := chainid()\n        }\n        return id;\n    }\n\n    /**\n     * Main function to be called when user wants to execute meta transaction.\n     * The actual function to be called should be passed as param with name functionSignature\n     * Here the basic signature recovery is being used. Signature is expected to be generated using\n     * personal_sign method.\n     * @param userAddress Address of user trying to do meta transaction\n     * @param functionSignature Signature of the actual function to be called via meta transaction\n     * @param sigR R part of the signature\n     * @param sigS S part of the signature\n     * @param sigV V part of the signature\n     */\n    function executeMetaTransaction(\n        address userAddress,\n        bytes memory functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        require(\n            verify(\n                userAddress,\n                nonces[userAddress],\n                getChainID(),\n                functionSignature,\n                sigR,\n                sigS,\n                sigV\n            ),\n            \"Signer and signature do not match\"\n        );\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        // Append userAddress at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n\n        require(success, \"Function call not successful\");\n        emit MetaTransactionExecuted(\n            userAddress,\n            msg.sender,\n            functionSignature\n        );\n        return returnData;\n    }\n\n    function getNonce(address user) external view returns (uint256 nonce) {\n        nonce = nonces[user];\n    }\n\n    // Builds a prefixed hash to mimic the behavior of eth_sign.\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)\n            );\n    }\n\n    function verify(\n        address owner,\n        uint256 nonce,\n        uint256 chainID,\n        bytes memory functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public view returns (bool) {\n        bytes32 hash = prefixed(\n            keccak256(abi.encodePacked(nonce, this, chainID, functionSignature))\n        );\n        address signer = ecrecover(hash, sigV, sigR, sigS);\n        require(signer != address(0), \"Invalid signature\");\n        return (owner == signer);\n    }\n\n    function msgSender() internal view returns (address sender) {\n        if (msg.sender == address(this)) {\n            bytes memory array = msg.data;\n            uint256 index = msg.data.length;\n            assembly {\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\n                sender := and(\n                    mload(add(array, index)),\n                    0xffffffffffffffffffffffffffffffffffffffff\n                )\n            }\n        } else {\n            return msg.sender;\n        }\n    }\n}\n"
    },
    "contracts/DaiMainnet.sol": {
      "content": "// Copyright (C) 2017, 2018, 2019 dbrock, rain, mrchico\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\npragma solidity 0.6.12;\n\ncontract DaiMainnet {\n    // // --- Auth ---\n    // mapping(address => uint256) public wards;\n\n    // function rely(address guy) external auth {\n    //     wards[guy] = 1;\n    // }\n\n    // function deny(address guy) external auth {\n    //     wards[guy] = 0;\n    // }\n\n    // modifier auth {\n    //     require(wards[msg.sender] == 1, \"Dai/not-authorized\");\n    //     _;\n    // }\n\n    // --- ERC20 Data ---\n    string public constant name = \"Dai Stablecoin\";\n    string public constant symbol = \"DAI\";\n    string public constant version = \"1\";\n    uint8 public constant decimals = 18;\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n    mapping(address => uint256) public nonces;\n\n    event Approval(address indexed src, address indexed guy, uint256 wad);\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\n\n    // --- Math ---\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x);\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x);\n    }\n\n    // --- EIP712 niceties ---\n    bytes32 public DOMAIN_SEPARATOR;\n    // bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)\");\n    bytes32\n        public constant PERMIT_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\n\n    constructor(uint256 chainId_) public {\n        // wards[msg.sender] = 1;\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\n                    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n                ),\n                keccak256(bytes(name)),\n                keccak256(bytes(version)),\n                chainId_,\n                address(this)\n            )\n        );\n    }\n\n    // --- Token ---\n    function transfer(address dst, uint256 wad) external returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 wad\n    ) public returns (bool) {\n        require(balanceOf[src] >= wad, \"Dai/insufficient-balance\");\n        if (src != msg.sender && allowance[src][msg.sender] != uint256(-1)) {\n            require(\n                allowance[src][msg.sender] >= wad,\n                \"Dai/insufficient-allowance\"\n            );\n            allowance[src][msg.sender] = sub(allowance[src][msg.sender], wad);\n        }\n        balanceOf[src] = sub(balanceOf[src], wad);\n        balanceOf[dst] = add(balanceOf[dst], wad);\n        emit Transfer(src, dst, wad);\n        return true;\n    }\n\n    function mint(address usr, uint256 wad) external {\n        balanceOf[usr] = add(balanceOf[usr], wad);\n        totalSupply = add(totalSupply, wad);\n        emit Transfer(address(0), usr, wad);\n    }\n\n    function burn(address usr, uint256 wad) external {\n        require(balanceOf[usr] >= wad, \"Dai/insufficient-balance\");\n        if (usr != msg.sender && allowance[usr][msg.sender] != uint256(-1)) {\n            require(\n                allowance[usr][msg.sender] >= wad,\n                \"Dai/insufficient-allowance\"\n            );\n            allowance[usr][msg.sender] = sub(allowance[usr][msg.sender], wad);\n        }\n        balanceOf[usr] = sub(balanceOf[usr], wad);\n        totalSupply = sub(totalSupply, wad);\n        emit Transfer(usr, address(0), wad);\n    }\n\n    function approve(address usr, uint256 wad) external returns (bool) {\n        allowance[msg.sender][usr] = wad;\n        emit Approval(msg.sender, usr, wad);\n        return true;\n    }\n\n    // --- Alias ---\n    function push(address usr, uint256 wad) external {\n        transferFrom(msg.sender, usr, wad);\n    }\n\n    function pull(address usr, uint256 wad) external {\n        transferFrom(usr, msg.sender, wad);\n    }\n\n    function move(\n        address src,\n        address dst,\n        uint256 wad\n    ) external {\n        transferFrom(src, dst, wad);\n    }\n\n    // --- Approve by signature ---\n    function permit(\n        address holder,\n        address spender,\n        uint256 nonce,\n        uint256 expiry,\n        bool allowed,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR,\n                keccak256(\n                    abi.encode(\n                        PERMIT_TYPEHASH,\n                        holder,\n                        spender,\n                        nonce,\n                        expiry,\n                        allowed\n                    )\n                )\n            )\n        );\n\n        require(holder != address(0), \"Dai/invalid-address-0\");\n        require(holder == ecrecover(digest, v, r, s), \"Dai/invalid-permit\");\n        require(expiry == 0 || now <= expiry, \"Dai/permit-expired\");\n        require(nonce == nonces[holder]++, \"Dai/invalid-nonce\");\n        uint256 wad = allowed ? uint256(-1) : 0;\n        allowance[holder][spender] = wad;\n        emit Approval(holder, spender, wad);\n    }\n}\n"
    },
    "contracts/DaiMatic.sol": {
      "content": "\n// import \"@openzeppelin/contracts/GSN/Context.sol\";\ncontract OZContext {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\ninterface OZIERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"../vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/math/SafeMath.sol\";\n\nimport \"../vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/utils/Address.sol\";\nimport \"../vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/utils/EnumerableSet.sol\";\n// import \"@openzeppelin/contracts/access/AccessControl.sol\";\nabstract contract OZAccessControl is OZContext {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using Address for address;\n\n    struct RoleData {\n        EnumerableSet.AddressSet members;\n        bytes32 adminRole;\n    }\n\n    mapping (bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view returns (bool) {\n        return _roles[role].members.contains(account);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n        return _roles[role].members.length();\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n        return _roles[role].members.at(index);\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\n\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual {\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (_roles[role].members.add(account)) {\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (_roles[role].members.remove(account)) {\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n\n\n\n// File: contracts/child/ChildToken/UpgradeableChildERC20/ERC20.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\n\n\n\n\n/**\n * Modified openzeppelin implemtation to add setters for name, symbol and decimals.\n * This was needed because the variables cannot be set in constructor as the contract is upgradeable.\n */\n\n/**\n * @dev openzeppelin Implementation of the {IERC20} interface.\n *\n * Modified to add setters for name, symbol and decimals. This was needed\n * because\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is OZContext, OZIERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function setName(string memory newName) internal {\n      _name = newName;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function setSymbol(string memory newSymbol) internal {\n      _symbol = newSymbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function setDecimals(uint8 newDecimals) internal {\n      _decimals = newDecimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\n\n// File: contracts/common/AccessControlMixin.sol\n\npragma solidity ^0.6.6;\n\n\ncontract AccessControlMixin is OZAccessControl {\n    string private _revertMsg;\n    function _setupContractId(string memory contractId) internal {\n        _revertMsg = string(abi.encodePacked(contractId, \": INSUFFICIENT_PERMISSIONS\"));\n    }\n\n    modifier only(bytes32 role) {\n        require(\n            hasRole(role, _msgSender()),\n            _revertMsg\n        );\n        _;\n    }\n}\n\n// File: contracts/child/ChildToken/IChildToken.sol\n\npragma solidity ^0.6.6;\n\ninterface IChildToken {\n    function deposit(address user, bytes calldata depositData) external;\n}\n\n// File: contracts/common/Initializable.sol\n\npragma solidity ^0.6.6;\n\ncontract Initializable {\n    bool inited = false;\n\n    modifier initializer() {\n        require(!inited, \"already inited\");\n        _;\n        inited = true;\n    }\n}\n\n// File: contracts/common/EIP712Base.sol\n\npragma solidity ^0.6.6;\n\n\ncontract EIP712Base is Initializable {\n    struct EIP712Domain {\n        string name;\n        string version;\n        address verifyingContract;\n        bytes32 salt;\n    }\n\n    string constant public ERC712_VERSION = \"1\";\n\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH = keccak256(\n        bytes(\n            \"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\"\n        )\n    );\n    bytes32 internal domainSeperator;\n\n    // supposed to be called once while initializing.\n    // one of the contractsa that inherits this contract follows proxy pattern\n    // so it is not possible to do this in a constructor\n    function _initializeEIP712(\n        string memory name\n    )\n        internal\n        initializer\n    {\n        _setDomainSeperator(name);\n    }\n\n    function _setDomainSeperator(string memory name) internal {\n        domainSeperator = keccak256(\n            abi.encode(\n                EIP712_DOMAIN_TYPEHASH,\n                keccak256(bytes(name)),\n                keccak256(bytes(ERC712_VERSION)),\n                address(this),\n                bytes32(getChainId())\n            )\n        );\n    }\n\n    function getDomainSeperator() public view returns (bytes32) {\n        return domainSeperator;\n    }\n\n    function getChainId() public pure returns (uint256) {\n        uint256 id;\n        assembly {\n            id := chainid()\n        }\n        return id;\n    }\n\n    /**\n     * Accept message hash and returns hash message in EIP712 compatible form\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\n     * https://eips.ethereum.org/EIPS/eip-712\n     * \"\\\\x19\" makes the encoding deterministic\n     * \"\\\\x01\" is the version byte to make it compatible to EIP-191\n     */\n    function toTypedMessageHash(bytes32 messageHash)\n        internal\n        view\n        returns (bytes32)\n    {\n        return\n            keccak256(\n                abi.encodePacked(\"\\x19\\x01\", getDomainSeperator(), messageHash)\n            );\n    }\n}\n\n// File: contracts/common/NativeMetaTransaction.sol\n\npragma solidity ^0.6.6;\n\n\n\ncontract NativeMetaTransaction is EIP712Base {\n    using SafeMath for uint256;\n    bytes32 private constant META_TRANSACTION_TYPEHASH = keccak256(\n        bytes(\n            \"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\"\n        )\n    );\n    event MetaTransactionExecuted(\n        address userAddress,\n        address payable relayerAddress,\n        bytes functionSignature\n    );\n    mapping(address => uint256) nonces;\n\n    /*\n     * Meta transaction structure.\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\n     * He should call the desired function directly in that case.\n     */\n    struct MetaTransaction {\n        uint256 nonce;\n        address from;\n        bytes functionSignature;\n    }\n\n    function executeMetaTransaction(\n        address userAddress,\n        bytes memory functionSignature,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) public payable returns (bytes memory) {\n        MetaTransaction memory metaTx = MetaTransaction({\n            nonce: nonces[userAddress],\n            from: userAddress,\n            functionSignature: functionSignature\n        });\n\n        require(\n            verify(userAddress, metaTx, sigR, sigS, sigV),\n            \"Signer and signature do not match\"\n        );\n\n        // increase nonce for user (to avoid re-use)\n        nonces[userAddress] = nonces[userAddress].add(1);\n\n        emit MetaTransactionExecuted(\n            userAddress,\n            msg.sender,\n            functionSignature\n        );\n\n        // Append userAddress and relayer address at the end to extract it from calling context\n        (bool success, bytes memory returnData) = address(this).call(\n            abi.encodePacked(functionSignature, userAddress)\n        );\n        require(success, \"Function call not successful\");\n\n        return returnData;\n    }\n\n    function hashMetaTransaction(MetaTransaction memory metaTx)\n        internal\n        pure\n        returns (bytes32)\n    {\n        return\n            keccak256(\n                abi.encode(\n                    META_TRANSACTION_TYPEHASH,\n                    metaTx.nonce,\n                    metaTx.from,\n                    keccak256(metaTx.functionSignature)\n                )\n            );\n    }\n\n    function getNonce(address user) public view returns (uint256 nonce) {\n        nonce = nonces[user];\n    }\n\n    function verify(\n        address signer,\n        MetaTransaction memory metaTx,\n        bytes32 sigR,\n        bytes32 sigS,\n        uint8 sigV\n    ) internal view returns (bool) {\n        require(signer != address(0), \"NativeMetaTransaction: INVALID_SIGNER\");\n        return\n            signer ==\n            ecrecover(\n                toTypedMessageHash(hashMetaTransaction(metaTx)),\n                sigV,\n                sigR,\n                sigS\n            );\n    }\n}\n\n// File: contracts/common/ContextMixin.sol\n\npragma solidity ^0.6.6;\n\nabstract contract ContextMixin {\n    function msgSender()\n        internal\n        view\n        returns (address payable sender)\n    {\n        if (msg.sender == address(this)) {\n            bytes memory array = msg.data;\n            uint256 index = msg.data.length;\n            assembly {\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\n                sender := and(\n                    mload(add(array, index)),\n                    0xffffffffffffffffffffffffffffffffffffffff\n                )\n            }\n        } else {\n            sender = msg.sender;\n        }\n        return sender;\n    }\n}\n\n// File: contracts/child/ChildToken/UpgradeableChildERC20/UChildERC20.sol\n\npragma solidity ^0.6.6;\n\n\n\n\n\n\n\ncontract UChildERC20 is\n    ERC20,\n    IChildToken,\n    AccessControlMixin,\n    NativeMetaTransaction,\n    ContextMixin\n{\n    bytes32 public constant DEPOSITOR_ROLE = keccak256(\"DEPOSITOR_ROLE\");\n\n    constructor() public ERC20(\"\", \"\") {}\n\n    /**\n     * @notice Initialize the contract after it has been proxified\n     * @dev meant to be called once immediately after deployment\n     */\n    function initialize(\n        string calldata name_,\n        string calldata symbol_,\n        uint8 decimals_,\n        address childChainManager\n    )\n        external\n        initializer\n    {\n        setName(name_);\n        setSymbol(symbol_);\n        setDecimals(decimals_);\n        _setupContractId(string(abi.encodePacked(\"Child\", symbol_)));\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        _setupRole(DEPOSITOR_ROLE, childChainManager);\n        _initializeEIP712(name_);\n    }\n\n    // This is to support Native meta transactions\n    // never use msg.sender directly, use _msgSender() instead\n    function _msgSender()\n        internal\n        override\n        view\n        returns (address payable sender)\n    {\n        return ContextMixin.msgSender();\n    }\n\n    function changeName(string calldata name_) external only(DEFAULT_ADMIN_ROLE) {\n        setName(name_);\n        _setDomainSeperator(name_);\n    }\n\n    /**\n     * @notice called when token is deposited on root chain\n     * @dev Should be callable only by ChildChainManager\n     * Should handle deposit by minting the required amount for user\n     * Make sure minting is done only by this function\n     * @param user user address for whom deposit is being done\n     * @param depositData abi encoded amount\n     */\n    function deposit(address user, bytes calldata depositData)\n        external\n        override\n        only(DEPOSITOR_ROLE)\n    {\n        uint256 amount = abi.decode(depositData, (uint256));\n        _mint(user, amount);\n    }\n\n    /**\n     * @notice called when user wants to withdraw tokens back to root chain\n     * @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\n     * @param amount amount of tokens to withdraw\n     */\n    function withdraw(uint256 amount) external {\n        _burn(_msgSender(), amount);\n    }\n}\n\n// File: contracts/child/ChildToken/DappTokens/UChildDAI.sol\n\npragma solidity ^0.6.6;\n\n// import \"@nomiclabs/buidler/console.sol\";\n\ncontract DaiMatic is UChildERC20 {\n    // bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)\");\n    bytes32 public constant PERMIT_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\n\n    // --- Alias ---\n    function push(address usr, uint wad) external {\n        transferFrom(msg.sender, usr, wad);\n    }\n    function pull(address usr, uint wad) external {\n        transferFrom(usr, msg.sender, wad);\n    }\n    function move(address src, address dst, uint wad) external {\n        transferFrom(src, dst, wad);\n    }\n\n    // Added for testing purposes only\n    function mint(address usr, uint256 wad) external {\n        _mint(usr, wad);\n    }\n\n    // --- Approve by signature ---\n    function permit(\n        address holder,\n        address spender,\n        uint256 nonce,\n        uint256 expiry,\n        bool allowed,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external {\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                getDomainSeperator(),\n                keccak256(\n                    abi.encode(\n                        PERMIT_TYPEHASH,\n                        holder,\n                        spender,\n                        nonce,\n                        expiry,\n                        allowed\n                    )\n                )\n        ));\n\n        require(holder == ecrecover(digest, v, r, s), \"UChildDAI: INVALID-PERMIT\");\n        require(expiry == 0 || now <= expiry, \"UChildDAI: PERMIT-EXPIRED\");\n        require(nonce == nonces[holder]++, \"UChildDAI: INVALID-NONCE\");\n        require(msg.sender != address(this), \"UChildDAI: PERMIT_META_TX_DISABLED\");\n        uint wad = allowed ? uint(-1) : 0;\n        _approve(holder, spender, wad);\n    }\n}\n"
    },
    "contracts/ERC20PatronageReceipt_v2_upgradable.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport \"../vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/token/ERC20/ERC20.sol\";\nimport \"../vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/access/AccessControl.sol\";\nimport \"./GSNRecipientBase.sol\";\n\nimport \"../vendered/gsn-2.0.0-beta.1.3/contracts/interfaces/IKnowForwarderAddressGsn.sol\";\n\n// import \"@nomiclabs/buidler/console.sol\";\n\ncontract ERC20PatronageReceipt_v2_upgradable is\n    GSNRecipientBase,\n    ERC20UpgradeSafe,\n    AccessControlUpgradeSafe,\n    IKnowForwarderAddressGsn\n{\n    bytes32 public constant MINTER_ROLE = keccak256(\"minter\");\n    bytes32 public constant ADMIN_ROLE = keccak256(\"admin\");\n\n    event Init();\n    event MinterAdded(address indexed account);\n    event MinterRemoved(address indexed account);\n\n    function _msgSender()\n        internal\n        override(ContextUpgradeSafe, GSNRecipientBase)\n        view\n        returns (address payable)\n    {\n        return GSNRecipientBase._msgSender();\n    }\n\n    function _msgData()\n        internal\n        override(ContextUpgradeSafe, GSNRecipientBase)\n        view\n        returns (bytes memory)\n    {\n        return GSNRecipientBase._msgData();\n    }\n\n    function setup(\n        string memory name,\n        string memory symbol,\n        address minter,\n        address admin\n    ) public initializer {\n        ERC20UpgradeSafe.__ERC20_init_unchained(name, symbol);\n        AccessControlUpgradeSafe.__AccessControl_init_unchained();\n        _setupRole(MINTER_ROLE, minter);\n        _setupRole(ADMIN_ROLE, admin);\n        _setRoleAdmin(MINTER_ROLE, ADMIN_ROLE);\n\n        GSNRecipientBase.initialize();\n\n        emit Init();\n    }\n\n    function mint(address to, uint256 amount) public {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"Caller is not a minter\");\n\n        _mint(to, amount);\n    }\n\n    function addMinter(address minter) public {\n        require(hasRole(ADMIN_ROLE, _msgSender()), \"Caller not admin\");\n        grantRole(MINTER_ROLE, minter);\n\n        emit MinterAdded(minter);\n    }\n\n    function renounceMinter() public {\n        require(hasRole(ADMIN_ROLE, _msgSender()), \"Caller not admin\");\n        renounceRole(MINTER_ROLE, _msgSender());\n\n        emit MinterRemoved(_msgSender());\n    }\n\n    function burn(address from, uint256 amount) public {\n        // For now anyone can burn...\n        // require(hasRole(BURNER_ROLE, _msgSender()), \"Caller is not a burner\");\n        _burn(from, amount);\n    }\n\n    function getTrustedForwarder() public override view returns (address) {\n        return trustedForwarder;\n    }\n\n    function setTrustedForwarder(address forwarder) public {\n        require(hasRole(ADMIN_ROLE, _msgSender()), \"Caller is not a admin\");\n\n        trustedForwarder = forwarder;\n    }\n}\n"
    },
    "vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/token/ERC20/ERC20.sol": {
      "content": "pragma solidity ^0.6.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20MinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n\n    function __ERC20_init(string memory name, string memory symbol) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name, symbol);\n    }\n\n    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\n\n\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n\n    }\n\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n\n    uint256[44] private __gap;\n}\n"
    },
    "vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/token/ERC20/IERC20.sol": {
      "content": "pragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/interfaces/IDai.sol": {
      "content": "pragma solidity ^0.6.0;\n\ninterface IDai {\n    function mint(address account, uint256 amount) external;\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external virtual returns (bool);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        virtual\n        returns (bool);\n\n    function balanceOf(address account) external virtual view returns (uint256);\n\n    function permit(\n        address holder,\n        address spender,\n        uint256 nonce,\n        uint256 expiry,\n        bool allowed,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "contracts/Migrations.sol": {
      "content": "pragma solidity >=0.6.0;\n\ncontract Migrations {\n    address public owner;\n    uint256 public last_completed_migration;\n\n    modifier restricted() {\n        if (msg.sender == owner) _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function setCompleted(uint256 completed) public restricted {\n        last_completed_migration = completed;\n    }\n\n    function upgrade(address new_address) public restricted {\n        Migrations upgraded = Migrations(new_address);\n        upgraded.setCompleted(last_completed_migration);\n    }\n}\n"
    },
    "contracts/MintManager_v2.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"./mod/ERC721.sol\";\nimport \"./interfaces/IERC20Mintable.sol\";\nimport \"@nomiclabs/buidler/console.sol\";\n\ncontract MintManager_v2 is Initializable {\n    using SafeMath for uint256;\n\n    address public admin;\n    address public steward;\n    IERC20Mintable public token;\n\n    event Init();\n\n\n    modifier onlySteward() {\n        require(msg.sender == steward, \"Not steward\");\n        _;\n    }\n\n    function initialize(\n        address _admin,\n        address _steward,\n        address _token\n    ) public initializer {\n        admin = _admin;\n        steward = _steward;\n        token = IERC20Mintable(_token);\n\n        emit Init();\n    }\n\n    function tokenMint(\n        address receiverOfTokens,\n        uint256 time,\n        uint256 mintRate\n    ) external onlySteward {\n        uint256 amountToMintForUser = time.mul(mintRate);\n        uint256 amountToMintForTreasury = amountToMintForUser.mul(20).div(100);\n\n        token.mint(receiverOfTokens, amountToMintForUser);\n        token.mint(admin, amountToMintForTreasury);\n    }\n}\n"
    },
    "@nomiclabs/buidler/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.8.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logByte(byte p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(byte)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "contracts/patches_and_utilities/URIFixer.sol": {
      "content": "pragma solidity ^0.6.0;\n\ncontract Initializable {\n    bool private initialized;\n    bool private initializing;\n    uint256[50] private ______gap;\n}\n\ncontract Context {}\n\ninterface IERC165 {}\n\ncontract IERC721 is Initializable, IERC165 {}\n\ncontract IERC721Receiver {}\n\nlibrary SafeMath {}\n\nlibrary Address {}\n\nlibrary Counters {\n    using SafeMath for uint256;\n\n    struct Counter {\n        uint256 _value;\n    }\n}\n\ncontract ERC165 is Initializable, IERC165 {\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    uint256[50] private ______gap;\n}\n\ncontract ERC721 is Initializable, Context, ERC165, IERC721 {\n    using SafeMath for uint256;\n    using Address for address;\n    using Counters for Counters.Counter;\n\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    mapping(uint256 => address) private _tokenOwner;\n\n    mapping(uint256 => address) private _tokenApprovals;\n\n    mapping(address => Counters.Counter) private _ownedTokensCount;\n\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    uint256[50] private ______gap;\n}\n\ncontract IERC721Enumerable is Initializable, IERC721 {}\n\ncontract ERC721Enumerable is\n    Initializable,\n    Context,\n    ERC165,\n    ERC721,\n    IERC721Enumerable\n{\n    mapping(address => uint256[]) private _ownedTokens;\n\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    uint256[] private _allTokens;\n\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n\n    uint256[50] private ______gap;\n}\n\ncontract IERC721Metadata is Initializable, IERC721 {}\n\ncontract ERC721Metadata is\n    Initializable,\n    Context,\n    ERC165,\n    ERC721,\n    IERC721Metadata\n{\n    string private _name;\n\n    string private _symbol;\n\n    mapping(uint256 => string) _tokenURIs;\n\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n\n    uint256[50] private ______gap;\n}\n\nlibrary Roles {\n    struct Role {\n        mapping(address => bool) bearer;\n    }\n}\n\ncontract MinterRole is Initializable, Context {\n    using Roles for Roles.Role;\n\n    Roles.Role private _minters;\n\n    uint256[50] private ______gap;\n}\n\ncontract ERC721MetadataMintable is\n    Initializable,\n    ERC721,\n    ERC721Metadata,\n    MinterRole\n{\n    uint256[49] private ______gap;\n    address public metadataAdmin;\n}\n\ncontract URIFixer is\n    Initializable,\n    ERC721,\n    ERC721Enumerable,\n    ERC721Metadata,\n    ERC721MetadataMintable\n{\n    address public steward;\n\n    // mapping(uint256 => bytes32) _tokenURInew;\n\n    function setOwner(address upgradeAdmin) public {\n        require(metadataAdmin == address(0)); // This can only be called once!\n        metadataAdmin = upgradeAdmin;\n    }\n\n    function updateTokenUri(uint256 tokenIds, string memory newTokenUri)\n        public\n    {\n        require(metadataAdmin == msg.sender);\n        _tokenURIs[tokenIds] = newTokenUri;\n    }\n}\n"
    },
    "contracts/tests/SendBlockAttacker.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"../WildcardSteward_v3_matic.sol\";\n\ncontract SendBlockAttacker {\n    // TODO: fix this function to work with erc20?\n    // function buyOnBehalf(\n    //     WildcardSteward_v3_matic stewardAddress,\n    //     uint256 tokenId,\n    //     uint256 newPrice\n    // ) public payable {\n    //     stewardAddress.buyAuction.value(msg.value)(tokenId, newPrice, 50000);\n    // }\n\n    function withdrawDeposit(WildcardSteward_v3_matic stewardAddress, uint256 amount)\n        public\n    {\n        stewardAddress.withdrawDeposit(amount);\n    }\n\n    function fallback() external payable {\n        revert(\"I'm Malicious\");\n    }\n}\n"
    },
    "contracts/WildcardSteward_v3_matic.sol": {
      "content": "pragma solidity 0.6.12;\n\nimport \"../vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/math/SafeMath.sol\";\nimport \"../vendered/@openzeppelin/contracts-ethereum-package-3.0.0/contracts/Initializable.sol\";\n\nimport \"./ERC721Patronage_v1.sol\";\nimport \"./interfaces/IMintManager.sol\";\nimport \"./interfaces/IERC721Patronage.sol\";\n// import \"./interfaces/IERC20Mintable.sol\";\n\nimport \"./BasicMetaTransaction.sol\";\n\nimport \"./interfaces/IDai.sol\";\n\n// import \"./GSNRecipientBase.sol\";\n\n// import \"../vendered/gsn-2.0.0-beta.1.3/contracts/BaseRelayRecipient.sol\";\n// import \"../vendered/gsn-2.0.0-beta.1.3/contracts/interfaces/IKnowForwarderAddressGsn.sol\";\n\n// import \"@nomiclabs/buidler/console.sol\";\n\ncontract WildcardSteward_v3_matic is Initializable, BasicMetaTransaction {\n    /*\n    This smart contract collects patronage from current owner through a Harberger tax model and \n    takes stewardship of the asset token if the patron can't pay anymore.\n\n    Harberger Tax (COST):\n    - Asset is always on sale.\n    - You have to have a price set.\n    - Tax (Patronage) is paid to maintain ownership.\n    - Steward maints control over ERC721.\n    */\n    using SafeMath for uint256;\n    mapping(uint256 => uint256) public price; //in wei\n    IERC721Patronage public assetToken; // ERC721 NFT.\n\n    mapping(uint256 => uint256) deprecated_totalCollected; // THIS VALUE IS DEPRECATED\n    mapping(uint256 => uint256) deprecated_currentCollected; // THIS VALUE IS DEPRECATED\n    mapping(uint256 => uint256) deprecated_timeLastCollected; // THIS VALUE IS DEPRECATED.\n    mapping(address => uint256) public timeLastCollectedPatron;\n    mapping(address => uint256) public deposit;\n    mapping(address => uint256) public totalPatronOwnedTokenCost;\n\n    mapping(uint256 => address) public benefactors; // non-profit benefactor\n    mapping(address => uint256) public benefactorFunds;\n\n    mapping(uint256 => address) deprecated_currentPatron; // Deprecate This is different to the current token owner.\n    mapping(uint256 => mapping(address => bool)) deprecated_patrons; // Deprecate\n    mapping(uint256 => mapping(address => uint256)) deprecated_timeHeld; // Deprecate\n\n    mapping(uint256 => uint256) deprecated_timeAcquired; // deprecate\n\n    // 1200% patronage\n    mapping(uint256 => uint256) public patronageNumerator;\n    uint256 public patronageDenominator;\n\n    enum StewardState {Foreclosed, Owned}\n    mapping(uint256 => StewardState) public state;\n\n    address public admin;\n\n    //////////////// NEW variables in v2///////////////////\n    mapping(uint256 => uint256) deprecated_tokenGenerationRate; // we can reuse the patronage denominator\n\n    IMintManager public mintManager;\n    //////////////// NEW variables in v3 ///////////////////\n    uint256 public auctionStartPrice;\n    uint256 public auctionEndPrice;\n    uint256 public auctionLength;\n\n    mapping(uint256 => address) public artistAddresses; //mapping from tokenID to the artists address\n    mapping(uint256 => uint256) public serviceProviderPercentages; // mapping from tokenID to the percentage sale cut of wildcards for each token\n    mapping(uint256 => uint256) public artistPercentages; // tokenId to artist percetages. To make it configurable. 10 000 = 100%\n    mapping(uint256 => uint256) public tokenAuctionBeginTimestamp;\n\n    mapping(address => uint256) public totalPatronTokenGenerationRate; // The total token generation rate for all the tokens of the given address.\n    mapping(address => uint256) public totalBenefactorTokenNumerator;\n    mapping(address => uint256) public timeLastCollectedBenefactor; // make my name consistent please\n    mapping(address => uint256) public benefactorCredit;\n    address public withdrawCheckerAdmin;\n\n    mapping(uint256 => bool) public withdrawalNonceUsed; // if true, the nonce (part of a withdrawal signature) has already been used for a withdrawal.\n\n    /*\n    31536000 seconds = 365 days\n\n    divisor = 365 days * 1000000000000\n            = 31536000000000000000\n    */\n\n    // 11574074074074 = 10^18 / 86400 This is just less (rounded down) than one token a day.\n    //       - this can be done since all tokens have the exact same tokenGenerationRate - and hardcoding saves gas.\n    uint256 public constant globalTokenGenerationRate = 11574074074074;\n    uint256 public constant yearTimePatronagDenominator = 31536000000000000000;\n\n    IDai public paymentToken; // ERC20 token used as payment.\n\n    mapping(uint256 => uint256) artistPercentageForNextSale;\n\n    event Buy(uint256 indexed tokenId, address indexed owner, uint256 price);\n    event PriceChange(uint256 indexed tokenId, uint256 newPrice);\n    event Foreclosure(address indexed prevOwner, uint256 foreclosureTime);\n    event RemainingDepositUpdate(\n        address indexed tokenPatron,\n        uint256 remainingDeposit\n    );\n\n    event AddTokenV3(\n        uint256 indexed tokenId,\n        uint256 patronageNumerator,\n        uint256 unixTimestampOfTokenAuctionStart\n    );\n\n    // QUESTION: in future versions, should these two events (CollectPatronage and CollectLoyalty) be combined into one? - they only ever happen at the same time.\n    // NOTE: this event is deprecated - it is only here for the upgrade function.\n    event CollectPatronage(\n        uint256 indexed tokenId,\n        address indexed patron,\n        uint256 remainingDeposit,\n        uint256 amountReceived\n    );\n    event CollectLoyalty(address indexed patron, uint256 amountRecieved);\n\n    event ArtistCommission(\n        uint256 indexed tokenId,\n        address artist,\n        uint256 artistCommission\n    );\n    event ArtistCommissionNextSale(\n        uint256 indexed tokenId,\n        address artist,\n        uint256 artistCommission\n    );\n    event WithdrawBenefactorFundsWithSafetyDelay(\n        address indexed benefactor,\n        uint256 withdrawAmount\n    );\n    event WithdrawBenefactorFunds(\n        address indexed benefactor,\n        uint256 withdrawAmount\n    );\n    event UpgradeToV3();\n    event ChangeAuctionParameters();\n\n    modifier onlyPatron(uint256 tokenId) {\n        require(msgSender() == assetToken.ownerOf(tokenId), \"Not patron\");\n        _;\n    }\n\n    modifier onlyAdmin() {\n        require(msgSender() == admin, \"Not admin\");\n        _;\n    }\n\n    modifier onlyReceivingBenefactorOrAdmin(uint256 tokenId) {\n        require(\n            msgSender() == benefactors[tokenId] || msgSender() == admin,\n            \"Not benefactor or admin\"\n        );\n        _;\n    }\n\n    modifier collectPatronageAndSettleBenefactor(uint256 tokenId) {\n        _collectPatronageAndSettleBenefactor(tokenId);\n        _;\n    }\n\n    modifier collectPatronagePatron(address tokenPatron) {\n        _collectPatronagePatron(tokenPatron);\n        _;\n    }\n\n    modifier youCurrentlyAreNotInDefault(address tokenPatron) {\n        require(\n            !(deposit[tokenPatron] == 0 &&\n                totalPatronOwnedTokenCost[tokenPatron] > 0),\n            \"no deposit existing tokens\"\n        );\n        _;\n    }\n\n    modifier updateBenefactorBalance(address benefactor) {\n        _updateBenefactorBalance(benefactor);\n        _;\n    }\n\n    modifier priceGreaterThanZero(uint256 _newPrice) {\n        require(_newPrice > 0, \"Price is zero\");\n        _;\n    }\n    modifier notNullAddress(address checkAddress) {\n        require(checkAddress != address(0), \"null address\");\n        _;\n    }\n    modifier notSameAddress(address firstAddress, address secondAddress) {\n        require(firstAddress != secondAddress, \"cannot be same address\");\n        _;\n    }\n    modifier validWildcardsPercentage(\n        uint256 serviceProviderPercentage,\n        uint256 tokenID\n    ) {\n        if (artistPercentageForNextSale[tokenID] == 0) {\n            require(\n                serviceProviderPercentage >= 50000 &&\n                    serviceProviderPercentage <=\n                    (1000000 - artistPercentages[tokenID]), // not sub safemath. Is this okay?\n                \"commision not between 5% and 100% - artist commision\"\n            );\n        } else {\n            require(\n                serviceProviderPercentage >= 50000 &&\n                    serviceProviderPercentage <=\n                    (1000000 - artistPercentageForNextSale[tokenID]), // not sub safemath. Is this okay?\n                \"commision not between 5% and 100% - artist commision\"\n            );\n        }\n        _;\n    }\n\n    function initialize(\n        address _assetToken,\n        address _admin,\n        address _mintManager,\n        address _withdrawCheckerAdmin,\n        uint256 _auctionStartPrice,\n        uint256 _auctionEndPrice,\n        uint256 _auctionLength,\n        address _paymentToken\n    ) public initializer {\n        emit UpgradeToV3();\n        assetToken = IERC721Patronage(_assetToken);\n        admin = _admin;\n        withdrawCheckerAdmin = _withdrawCheckerAdmin;\n        mintManager = IMintManager(_mintManager);\n        paymentToken = IDai(_paymentToken);\n        _changeAuctionParameters(\n            _auctionStartPrice,\n            _auctionEndPrice,\n            _auctionLength\n        );\n    }\n\n    function uintToStr(uint256 _i)\n        internal\n        pure\n        returns (string memory _uintAsString)\n    {\n        if (_i == 0) {\n            return \"0\";\n        }\n\n        uint256 j = _i;\n        uint256 len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n\n        bytes memory bstr = new bytes(len);\n        while (_i != 0) {\n            bstr[--len] = bytes1(uint8(48 + (_i % 10)));\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n\n    function listNewTokens(\n        uint256[] memory tokens,\n        address[] memory _benefactors,\n        uint256[] memory _patronageNumerator,\n        address[] memory _artists,\n        uint256[] memory _artistCommission,\n        uint256[] memory _releaseDate\n    ) public onlyAdmin {\n        assert(tokens.length == _benefactors.length);\n        assert(tokens.length == _patronageNumerator.length);\n        assert(tokens.length == _releaseDate.length);\n        assert(_artists.length == _artistCommission.length);\n\n        for (uint8 i = 0; i < tokens.length; ++i) {\n            address benefactor = _benefactors[i];\n            require(_benefactors[i] != address(0), \"null address\");\n            string memory idString = uintToStr(tokens[i]);\n            string memory tokenUriBase = \"https://wildcards.xyz/token/\";\n            string memory tokenUri = string(\n                abi.encodePacked(tokenUriBase, idString)\n            );\n            assetToken.mintWithTokenURI(address(this), tokens[i], tokenUri);\n            benefactors[tokens[i]] = _benefactors[i];\n            state[tokens[i]] = StewardState.Foreclosed;\n            patronageNumerator[tokens[i]] = _patronageNumerator[i];\n            // tokenGenerationRate[tokens[i]] = _tokenGenerationRate[i];\n\n            if (_releaseDate[i] < now) {\n                tokenAuctionBeginTimestamp[tokens[i]] = now;\n            } else {\n                tokenAuctionBeginTimestamp[tokens[i]] = _releaseDate[i];\n            }\n\n            emit AddTokenV3(\n                tokens[i],\n                _patronageNumerator[i],\n                tokenAuctionBeginTimestamp[tokens[i]]\n            );\n            // Adding this after the add token emit, so graph can first capture the token before processing the change artist things\n            if (_artists.length > i) {\n                if (_artists[i] != address(0)) {\n                    changeArtistAddressAndCommission(\n                        tokens[i],\n                        _artists[i],\n                        _artistCommission[i]\n                    );\n                }\n            }\n        }\n    }\n\n    // TODO: you need an event in here!\n    function changeReceivingBenefactor(\n        uint256 tokenId,\n        address _newReceivingBenefactor\n    )\n        public\n        onlyReceivingBenefactorOrAdmin(tokenId)\n        updateBenefactorBalance(benefactors[tokenId])\n        updateBenefactorBalance(_newReceivingBenefactor)\n        notNullAddress(_newReceivingBenefactor)\n    {\n        address oldBenfactor = benefactors[tokenId];\n\n        require(\n            oldBenfactor != _newReceivingBenefactor,\n            \"cannot be same address\"\n        );\n\n        // Collect patronage from old and new benefactor before changing totalBenefactorTokenNumerator on both\n        uint256 scaledPrice = price[tokenId].mul(patronageNumerator[tokenId]);\n        totalBenefactorTokenNumerator[oldBenfactor] = totalBenefactorTokenNumerator[oldBenfactor]\n            .sub(scaledPrice);\n        totalBenefactorTokenNumerator[_newReceivingBenefactor] = totalBenefactorTokenNumerator[_newReceivingBenefactor]\n            .add(scaledPrice);\n\n        benefactors[tokenId] = _newReceivingBenefactor;\n        // NB No fund exchanging here please!\n    }\n\n    // TODO: you need an event in here!\n    // NB This function is if an organisation loses their keys etc..\n    // It will transfer their deposit to their new benefactor address\n    // It should only be called once all their tokens also changeReceivingBenefactor\n    function changeReceivingBenefactorDeposit(\n        address oldBenfactor,\n        address _newReceivingBenefactor\n    )\n        public\n        onlyAdmin\n        notNullAddress(_newReceivingBenefactor)\n        notSameAddress(oldBenfactor, _newReceivingBenefactor)\n    {\n        require(benefactorFunds[oldBenfactor] > 0, \"no funds\");\n\n        benefactorFunds[_newReceivingBenefactor] = benefactorFunds[_newReceivingBenefactor]\n            .add(benefactorFunds[oldBenfactor]);\n        benefactorFunds[oldBenfactor] = 0;\n    }\n\n    function changeAdmin(address _admin) public onlyAdmin {\n        admin = _admin;\n    }\n\n    function changeWithdrawCheckerAdmin(address _withdrawCheckerAdmin)\n        public\n        onlyAdmin\n        notNullAddress(_withdrawCheckerAdmin)\n    {\n        withdrawCheckerAdmin = _withdrawCheckerAdmin;\n    }\n\n    function changeArtistAddressAndCommission(\n        uint256 tokenId,\n        address artistAddress,\n        uint256 percentage\n    ) public onlyAdmin {\n        require(percentage <= 200000, \"not more than 20%\");\n        require(artistAddress != address(0), \"cannot be the zero address\");\n        artistPercentages[tokenId] = percentage;\n        artistAddresses[tokenId] = artistAddress;\n        emit ArtistCommission(tokenId, artistAddress, percentage);\n    }\n\n    function setArtistCommissionOnNextSale(uint256 tokenId, uint256 percentage)\n        public\n        onlyAdmin\n    {\n        require(\n            artistAddresses[tokenId] != address(0),\n            \"Token doesn't have an artist\"\n        );\n        require(percentage <= 600000, \"not more than 60%\");\n        artistPercentageForNextSale[tokenId] = percentage;\n        emit ArtistCommissionNextSale(\n            tokenId,\n            artistAddresses[tokenId],\n            percentage\n        );\n    }\n\n    function _changeAuctionParameters(\n        uint256 _auctionStartPrice,\n        uint256 _auctionEndPrice,\n        uint256 _auctionLength\n    ) internal {\n        require(\n            _auctionStartPrice >= _auctionEndPrice,\n            \"auction start < auction end\"\n        );\n        require(_auctionLength >= 86400, \"1 day min auction length\");\n\n        auctionStartPrice = _auctionStartPrice;\n        auctionEndPrice = _auctionEndPrice;\n        auctionLength = _auctionLength;\n        emit ChangeAuctionParameters();\n    }\n\n    function changeAuctionParameters(\n        uint256 _auctionStartPrice,\n        uint256 _auctionEndPrice,\n        uint256 _auctionLength\n    ) external onlyAdmin {\n        _changeAuctionParameters(\n            _auctionStartPrice,\n            _auctionEndPrice,\n            _auctionLength\n        );\n    }\n\n    function patronageOwedPatron(address tokenPatron)\n        public\n        view\n        returns (uint256 patronageDue)\n    {\n        // NOTE: Leaving this code here as a reminder: totalPatronOwnedTokenCost[tokenPatron] has to be zero if timeLastCollectedPatron[tokenPatron] is zero. So effectively this line isn't needed.\n        // if (timeLastCollectedPatron[tokenPatron] == 0) return 0;\n        return\n            totalPatronOwnedTokenCost[tokenPatron]\n                .mul(now.sub(timeLastCollectedPatron[tokenPatron]))\n                .div(yearTimePatronagDenominator);\n    }\n\n    function patronageDueBenefactor(address benefactor)\n        public\n        view\n        returns (uint256 payoutDue)\n    {\n        // NOTE: Leaving this code here as a reminder: totalBenefactorTokenNumerator[tokenPatron] has to be zero if timeLastCollectedBenefactor[tokenPatron] is zero. So effectively this line isn't needed.\n        // if (timeLastCollectedBenefactor[benefactor] == 0) return 0;\n        return\n            totalBenefactorTokenNumerator[benefactor]\n                .mul(now.sub(timeLastCollectedBenefactor[benefactor]))\n                .div(yearTimePatronagDenominator);\n    }\n\n    function foreclosedPatron(address tokenPatron) public view returns (bool) {\n        if (patronageOwedPatron(tokenPatron) >= deposit[tokenPatron]) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function foreclosed(uint256 tokenId) public view returns (bool) {\n        address tokenPatron = assetToken.ownerOf(tokenId);\n        return foreclosedPatron(tokenPatron);\n    }\n\n    function depositAbleToWithdraw(address tokenPatron)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 collection = patronageOwedPatron(tokenPatron);\n        if (collection >= deposit[tokenPatron]) {\n            return 0;\n        } else {\n            return deposit[tokenPatron].sub(collection);\n        }\n    }\n\n    // function foreclosureTimePatron(address tokenPatron)\n    //     public\n    //     view\n    //     returns (uint256)\n    // {\n    //     uint256 pps = totalPatronOwnedTokenCost[tokenPatron].div(\n    //         yearTimePatronagDenominator\n    //     );\n    //     return now.add(depositAbleToWithdraw(tokenPatron).div(pps));\n    // }\n    function foreclosureTimePatron(address tokenPatron)\n        public\n        view\n        returns (uint256)\n    {\n\n            uint256 totalPatronYearlyPatronage\n         = totalPatronOwnedTokenCost[tokenPatron];\n        // timeLeftOfDeposit = deposit / (totalPatronYearlyPatronage / yearTimePatronagDenominator)\n        if (totalPatronYearlyPatronage > 0) {\n            return\n                now.add(\n                    (\n                        (\n                            depositAbleToWithdraw(tokenPatron).mul(\n                                yearTimePatronagDenominator\n                            )\n                        )\n                        // Add this to make sure this is the value rounded up\n                            .add(totalPatronYearlyPatronage - 1)\n                    )\n                        .div(totalPatronYearlyPatronage)\n                );\n        } else {\n            return 0;\n        }\n    }\n\n    function foreclosureTime(uint256 tokenId) public view returns (uint256) {\n        address tokenPatron = assetToken.ownerOf(tokenId);\n        return foreclosureTimePatron(tokenPatron);\n    }\n\n    /* actions */\n    function _collectLoyaltyPatron(\n        address tokenPatron,\n        uint256 timeSinceLastMint\n    ) internal {\n        if (timeSinceLastMint != 0) {\n            mintManager.tokenMint(\n                tokenPatron,\n                timeSinceLastMint,\n                totalPatronTokenGenerationRate[tokenPatron]\n            );\n            emit CollectLoyalty(\n                tokenPatron,\n                timeSinceLastMint.mul(\n                    totalPatronTokenGenerationRate[tokenPatron]\n                )\n            );\n        }\n    }\n\n    // TODO: create a version of this function that only collects patronage (and only settles the benefactor if the token forecloses) - is this needed?\n    function _collectPatronageAndSettleBenefactor(uint256 tokenId) public {\n        address tokenPatron = assetToken.ownerOf(tokenId);\n        uint256 newTimeLastCollectedOnForeclosure = _collectPatronagePatron(\n            tokenPatron\n        );\n\n        address benefactor = benefactors[tokenId];\n        // bool tokenForeclosed = newTimeLastCollectedOnForeclosure > 0;\n        bool tokenIsOwned = state[tokenId] == StewardState.Owned;\n        if (newTimeLastCollectedOnForeclosure > 0 && tokenIsOwned) {\n            tokenAuctionBeginTimestamp[tokenId] =\n                // The auction starts the second after the last time collected.\n                newTimeLastCollectedOnForeclosure +\n                1;\n\n\n                uint256 patronageDueBenefactorBeforeForeclosure\n             = patronageDueBenefactor(benefactor);\n\n            _foreclose(tokenId);\n\n            uint256 amountOverCredited = price[tokenId]\n                .mul(now.sub(newTimeLastCollectedOnForeclosure))\n                .mul(patronageNumerator[tokenId])\n                .div(yearTimePatronagDenominator);\n\n            if (amountOverCredited < patronageDueBenefactorBeforeForeclosure) {\n                _increaseBenefactorBalance(\n                    benefactor,\n                    patronageDueBenefactorBeforeForeclosure - amountOverCredited\n                );\n            } else {\n                _decreaseBenefactorBalance(\n                    benefactor,\n                    amountOverCredited - patronageDueBenefactorBeforeForeclosure\n                );\n            }\n\n            timeLastCollectedBenefactor[benefactor] = now;\n        } else {\n            _updateBenefactorBalance(benefactor);\n        }\n    }\n\n    // function safeSend(uint256 _wei, address payable recipient)\n    //     internal\n    //     returns (bool transferSuccess)\n    // {\n    //     (transferSuccess, ) = recipient.call.gas(2300).value(_wei)(\"\");\n    // }\n\n    function sendErc20(uint256 _wei, address recipient)\n        internal\n        returns (bool transferSuccess)\n    {\n        // try adaiContract.redeem(amount)  {\n        return paymentToken.transfer(recipient, _wei);\n        // } catch {\n        //   emit ADaiRedeemFailed();\n        //   adaiContract.transfer(msgSender(), amount);\n        // }\n    }\n\n    function receiveErc20(uint256 amount, address from)\n        internal\n        returns (bool transferSuccess)\n    {\n        return paymentToken.transferFrom(msgSender(), address(this), amount);\n    }\n\n    // if credit balance exists,\n    // if amount owed > creidt\n    // credit zero add amount\n    // else reduce credit by certain amount.\n    // else if credit balance doesn't exist\n    // add amount to balance\n    // TODO: this function should have an event\n    function _updateBenefactorBalance(address benefactor) public {\n        uint256 patronageDueForBenefactor = patronageDueBenefactor(benefactor);\n\n        if (patronageDueForBenefactor > 0) {\n            _increaseBenefactorBalance(benefactor, patronageDueForBenefactor);\n        }\n\n        timeLastCollectedBenefactor[benefactor] = now;\n    }\n\n    function _increaseBenefactorBalance(\n        address benefactor,\n        uint256 patronageDueBenefactor\n    ) internal {\n        if (benefactorCredit[benefactor] > 0) {\n            if (patronageDueBenefactor < benefactorCredit[benefactor]) {\n                benefactorCredit[benefactor] = benefactorCredit[benefactor].sub(\n                    patronageDueBenefactor\n                );\n            } else {\n                benefactorFunds[benefactor] = patronageDueBenefactor.sub(\n                    benefactorCredit[benefactor]\n                );\n                benefactorCredit[benefactor] = 0;\n            }\n        } else {\n            benefactorFunds[benefactor] = benefactorFunds[benefactor].add(\n                patronageDueBenefactor\n            );\n        }\n    }\n\n    function _decreaseBenefactorBalance(\n        address benefactor,\n        uint256 amountOverCredited\n    ) internal {\n        if (benefactorFunds[benefactor] > 0) {\n            if (amountOverCredited <= benefactorFunds[benefactor]) {\n                benefactorFunds[benefactor] = benefactorFunds[benefactor].sub(\n                    amountOverCredited\n                );\n            } else {\n                benefactorCredit[benefactor] = amountOverCredited.sub(\n                    benefactorFunds[benefactor]\n                );\n                benefactorFunds[benefactor] = 0;\n            }\n        } else {\n            benefactorCredit[benefactor] = benefactorCredit[benefactor].add(\n                amountOverCredited\n            );\n        }\n    }\n\n    function fundsDueForAuctionPeriodAtCurrentRate(address benefactor)\n        internal\n        view\n        returns (uint256)\n    {\n        return\n            totalBenefactorTokenNumerator[benefactor].mul(auctionLength).div(\n                yearTimePatronagDenominator\n            ); // 365 days * 1000000000000\n    }\n\n    function withdrawBenefactorFundsTo(address benefactor) public {\n        _updateBenefactorBalance(benefactor);\n\n        uint256 availableToWithdraw = benefactorFunds[benefactor];\n\n\n            uint256 benefactorWithdrawalSafetyDiscount\n         = fundsDueForAuctionPeriodAtCurrentRate(benefactor);\n\n        require(\n            availableToWithdraw > benefactorWithdrawalSafetyDiscount,\n            \"no funds\"\n        );\n\n        // NOTE: no need for safe-maths, above require prevents issues.\n        uint256 amountToWithdraw = availableToWithdraw -\n            benefactorWithdrawalSafetyDiscount;\n\n        benefactorFunds[benefactor] = benefactorWithdrawalSafetyDiscount;\n        if (sendErc20(amountToWithdraw, benefactor)) {\n            emit WithdrawBenefactorFundsWithSafetyDelay(\n                benefactor,\n                amountToWithdraw\n            );\n        } else {\n            // TODO: add an error in unsuccessful withdrawal.\n            benefactorFunds[benefactor] = benefactorFunds[benefactor].add(\n                amountToWithdraw\n            );\n        }\n    }\n\n    function hasher(\n        address benefactor,\n        uint256 maxAmount,\n        uint256 expiry,\n        uint256 nonce\n    ) public view returns (bytes32) {\n        // In ethereum you have to prepend all signature hashes with this message (supposedly to prevent people from)\n        return\n            keccak256(\n                abi.encodePacked(\n                    \"\\x19Ethereum Signed Message:\\n32\",\n                    keccak256(\n                        abi.encodePacked(benefactor, maxAmount, expiry, nonce)\n                    )\n                )\n            );\n    }\n\n    function withdrawBenefactorFundsToValidated(\n        address benefactor,\n        uint256 maxAmount,\n        uint256 expiry,\n        uint256 nonce,\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public {\n        hash = hasher(benefactor, maxAmount, expiry, nonce);\n        require(\n            ecrecover(hash, v, r, s) == withdrawCheckerAdmin,\n            \"no permission to withdraw\"\n        );\n        require(!withdrawalNonceUsed[nonce], \"nonce already used\");\n        require(\n            hash == hasher(benefactor, maxAmount, expiry, nonce),\n            \"incorrect hash\"\n        );\n        require(now < expiry, \"coupon expired\");\n        withdrawalNonceUsed[nonce] = true;\n\n        _updateBenefactorBalance(benefactor);\n\n        uint256 availableToWithdraw = benefactorFunds[benefactor];\n\n        if (availableToWithdraw > 0) {\n            if (availableToWithdraw > maxAmount) {\n                if (sendErc20(maxAmount, benefactor)) {\n                    benefactorFunds[benefactor] = availableToWithdraw.sub(\n                        maxAmount\n                    );\n                    emit WithdrawBenefactorFunds(\n                        benefactor,\n                        availableToWithdraw\n                    );\n                }\n            } else {\n                uint256 contractBalance = paymentToken.balanceOf(address(this));\n\n                if (sendErc20(availableToWithdraw, benefactor)) {\n                    // TODO: re-entrancy\n                    benefactorFunds[benefactor] = 0;\n                    emit WithdrawBenefactorFunds(\n                        benefactor,\n                        availableToWithdraw\n                    );\n                }\n            }\n        }\n    }\n\n    function _collectPatronagePatron(address tokenPatron)\n        public\n        returns (uint256 newTimeLastCollectedOnForeclosure)\n    {\n        uint256 patronageOwedByTokenPatron = patronageOwedPatron(tokenPatron);\n\n        uint256 timeSinceLastMint;\n\n        if (\n            patronageOwedByTokenPatron > 0 &&\n            patronageOwedByTokenPatron > deposit[tokenPatron]\n        ) {\n\n                uint256 previousCollectionTime\n             = timeLastCollectedPatron[tokenPatron];\n            newTimeLastCollectedOnForeclosure = previousCollectionTime.add(\n                (\n                    (now.sub(previousCollectionTime))\n                        .mul(deposit[tokenPatron])\n                        .div(patronageOwedByTokenPatron)\n                )\n            );\n            timeLastCollectedPatron[tokenPatron] = newTimeLastCollectedOnForeclosure;\n            deposit[tokenPatron] = 0;\n            timeSinceLastMint = (\n                newTimeLastCollectedOnForeclosure.sub(previousCollectionTime)\n            );\n        } else {\n            timeSinceLastMint = now.sub(timeLastCollectedPatron[tokenPatron]);\n            timeLastCollectedPatron[tokenPatron] = now;\n            deposit[tokenPatron] = deposit[tokenPatron].sub(\n                patronageOwedByTokenPatron\n            );\n        }\n\n        _collectLoyaltyPatron(tokenPatron, timeSinceLastMint);\n        emit RemainingDepositUpdate(tokenPatron, deposit[tokenPatron]);\n    }\n\n    function depositWei(uint256 amount) public {\n        depositWeiPatron(msgSender(), amount);\n    }\n\n    function depositWithPermit(\n        uint256 nonce,\n        uint256 expiry,\n        bool allowed,\n        uint8 v,\n        bytes32 r,\n        bytes32 s,\n        address patron,\n        uint256 amount\n    ) external {\n        paymentToken.permit(\n            msgSender(),\n            address(this),\n            nonce,\n            expiry,\n            allowed,\n            v,\n            r,\n            s\n        );\n        depositWeiPatron(patron, amount);\n    }\n\n    // Which the 'approve' function in erc20 this function is unsafe to be public.\n    function depositWeiPatron(address patron, uint256 amount) internal {\n        require(totalPatronOwnedTokenCost[patron] > 0, \"no tokens\");\n        deposit[patron] = deposit[patron].add(amount);\n        receiveErc20(amount, patron);\n        emit RemainingDepositUpdate(patron, deposit[patron]);\n    }\n\n    function _auctionPrice(uint256 tokenId) internal view returns (uint256) {\n        uint256 auctionEnd = tokenAuctionBeginTimestamp[tokenId].add(\n            auctionLength\n        );\n\n        // If it is not brand new and foreclosed, use the foreclosre auction price.\n        uint256 _auctionStartPrice;\n        if (price[tokenId] != 0 && price[tokenId] > auctionEndPrice) {\n            _auctionStartPrice = price[tokenId];\n        } else {\n            // Otherwise use starting auction price\n            _auctionStartPrice = auctionStartPrice;\n        }\n\n        if (now >= auctionEnd) {\n            return auctionEndPrice;\n        } else {\n            // startPrice - ( ( (startPrice - endPrice) * howLongThisAuctionBeenGoing ) / auctionLength )\n            return\n                _auctionStartPrice.sub(\n                    (_auctionStartPrice.sub(auctionEndPrice))\n                        .mul(now.sub(tokenAuctionBeginTimestamp[tokenId]))\n                        .div(auctionLength)\n                );\n        }\n    }\n\n    function buyWithPermit(\n        uint256 nonce,\n        uint256 expiry,\n        bool allowed,\n        uint8 v,\n        bytes32 r,\n        bytes32 s,\n        uint256 tokenId,\n        uint256 _newPrice,\n        uint256 previousPrice,\n        uint256 serviceProviderPercentage,\n        uint256 value\n    ) external {\n        paymentToken.permit(\n            msgSender(),\n            address(this),\n            nonce,\n            expiry,\n            allowed,\n            v,\n            r,\n            s\n        );\n        buy(\n            tokenId,\n            _newPrice,\n            previousPrice,\n            serviceProviderPercentage,\n            value\n        );\n    }\n\n    function buy(\n        uint256 tokenId,\n        uint256 _newPrice,\n        uint256 previousPrice,\n        uint256 serviceProviderPercentage,\n        uint256 value\n    )\n        public\n        collectPatronageAndSettleBenefactor(tokenId)\n        collectPatronagePatron(msgSender())\n        priceGreaterThanZero(_newPrice)\n        youCurrentlyAreNotInDefault(msgSender())\n        validWildcardsPercentage(serviceProviderPercentage, tokenId)\n    {\n        require(state[tokenId] == StewardState.Owned, \"token on auction\");\n        require(\n            price[tokenId] == previousPrice,\n            \"must specify current price accurately\"\n        );\n        require(\n            value > price[tokenId],\n            \"value sent must be strictly greater than the token price\"\n        );\n\n        receiveErc20(value, msgSender());\n        address owner = assetToken.ownerOf(tokenId);\n\n        _distributePurchaseProceeds(tokenId);\n\n        serviceProviderPercentages[tokenId] = serviceProviderPercentage;\n        deposit[msgSender()] = deposit[msgSender()].add(value).sub(\n            price[tokenId]\n        );\n        transferAssetTokenTo(\n            tokenId,\n            assetToken.ownerOf(tokenId),\n            msgSender(),\n            _newPrice\n        );\n        emit Buy(tokenId, msgSender(), _newPrice);\n    }\n\n    function buyAuctionWithPermit(\n        uint256 nonce,\n        uint256 expiry,\n        bool allowed,\n        uint8 v,\n        bytes32 r,\n        bytes32 s,\n        uint256 tokenId,\n        uint256 _newPrice,\n        uint256 serviceProviderPercentage,\n        uint256 value\n    ) external {\n        paymentToken.permit(\n            msgSender(),\n            address(this),\n            nonce,\n            expiry,\n            allowed,\n            v,\n            r,\n            s\n        );\n        buyAuction(tokenId, _newPrice, serviceProviderPercentage, value);\n    }\n\n    function buyAuction(\n        uint256 tokenId,\n        uint256 _newPrice,\n        uint256 serviceProviderPercentage,\n        uint256 value\n    )\n        public\n        collectPatronageAndSettleBenefactor(tokenId)\n        collectPatronagePatron(msgSender())\n        priceGreaterThanZero(_newPrice)\n        youCurrentlyAreNotInDefault(msgSender())\n        validWildcardsPercentage(serviceProviderPercentage, tokenId)\n    {\n        require(\n            state[tokenId] == StewardState.Foreclosed,\n            \"token not foreclosed\"\n        );\n        require(now >= tokenAuctionBeginTimestamp[tokenId], \"not on auction\");\n        uint256 auctionTokenPrice = _auctionPrice(tokenId);\n        require(\n            value > auctionTokenPrice,\n            \"value sent must be strictly greater than the token price\"\n        );\n\n        state[tokenId] = StewardState.Owned;\n\n        serviceProviderPercentages[tokenId] = serviceProviderPercentage;\n        receiveErc20(value, msgSender());\n\n        _distributeAuctionProceeds(auctionTokenPrice, tokenId);\n\n        deposit[msgSender()] = deposit[msgSender()].add(value).sub(\n            auctionTokenPrice\n        );\n        transferAssetTokenTo(\n            tokenId,\n            assetToken.ownerOf(tokenId),\n            msgSender(),\n            _newPrice\n        );\n        emit Buy(tokenId, msgSender(), _newPrice);\n    }\n\n    function _distributeArtistFunds(uint256 totalAmount, uint256 tokenId)\n        internal\n        returns (uint256 artistAmount)\n    {\n        if (\n            artistPercentages[tokenId] == 0 &&\n            artistPercentageForNextSale[tokenId] == 0\n        ) {\n            artistAmount = 0;\n        } else if (artistPercentageForNextSale[tokenId] != 0) {\n            artistAmount = totalAmount\n                .mul(artistPercentageForNextSale[tokenId])\n                .div(1000000);\n            sendErc20(artistAmount, artistAddresses[tokenId]);\n            artistPercentageForNextSale[tokenId] = 0;\n        } else {\n            artistAmount = totalAmount.mul(artistPercentages[tokenId]).div(\n                1000000\n            );\n            sendErc20(artistAmount, artistAddresses[tokenId]);\n        }\n    }\n\n    function _distributeAuctionProceeds(uint256 totalAmount, uint256 tokenId)\n        internal\n    {\n        uint256 artistAmount = _distributeArtistFunds(totalAmount, tokenId);\n        uint256 wildcardsAmount = totalAmount.sub(artistAmount);\n        deposit[admin] = deposit[admin].add(wildcardsAmount);\n    }\n\n    function _distributePurchaseProceeds(uint256 tokenId) internal {\n        uint256 totalAmount = price[tokenId];\n        address tokenPatron = assetToken.ownerOf(tokenId);\n        // Wildcards percentage calc\n        if (serviceProviderPercentages[tokenId] == 0) {\n            serviceProviderPercentages[tokenId] = 50000;\n        }\n        uint256 wildcardsAmount = totalAmount\n            .mul(serviceProviderPercentages[tokenId])\n            .div(1000000);\n\n        // Artist percentage calc\n        uint256 artistAmount = _distributeArtistFunds(totalAmount, tokenId);\n\n        uint256 previousOwnerProceedsFromSale = totalAmount\n            .sub(wildcardsAmount)\n            .sub(artistAmount);\n        if (\n            totalPatronOwnedTokenCost[tokenPatron] ==\n            price[tokenId].mul(patronageNumerator[tokenId])\n        ) {\n            previousOwnerProceedsFromSale = previousOwnerProceedsFromSale.add(\n                deposit[tokenPatron]\n            );\n            deposit[tokenPatron] = 0;\n            // address payableCurrentPatron = address(uint160(tokenPatron));\n            // (bool transferSuccess, ) = payableCurrentPatron\n            //     .call\n            //     .gas(2300)\n            //     .value(previousOwnerProceedsFromSale)(\"\");\n            // if (!transferSuccess) {\n            //     deposit[tokenPatron] = deposit[tokenPatron].add(\n            //         previousOwnerProceedsFromSale\n            //     );\n            // }\n\n            sendErc20(previousOwnerProceedsFromSale, tokenPatron);\n        } else {\n            deposit[tokenPatron] = deposit[tokenPatron].add(\n                previousOwnerProceedsFromSale\n            );\n        }\n\n        deposit[admin] = deposit[admin].add(wildcardsAmount);\n    }\n\n    function changePrice(uint256 tokenId, uint256 _newPrice)\n        public\n        onlyPatron(tokenId)\n        collectPatronageAndSettleBenefactor(tokenId)\n    {\n        require(state[tokenId] != StewardState.Foreclosed, \"foreclosed\");\n        require(_newPrice != 0, \"incorrect price\");\n        require(_newPrice < 10000 ether, \"exceeds max price\");\n\n        uint256 oldPriceScaled = price[tokenId].mul(\n            patronageNumerator[tokenId]\n        );\n        uint256 newPriceScaled = _newPrice.mul(patronageNumerator[tokenId]);\n        address tokenBenefactor = benefactors[tokenId];\n\n        totalPatronOwnedTokenCost[msgSender()] = totalPatronOwnedTokenCost[msg\n            .sender]\n            .sub(oldPriceScaled)\n            .add(newPriceScaled);\n\n        totalBenefactorTokenNumerator[tokenBenefactor] = totalBenefactorTokenNumerator[tokenBenefactor]\n            .sub(oldPriceScaled)\n            .add(newPriceScaled);\n\n        price[tokenId] = _newPrice;\n        emit PriceChange(tokenId, price[tokenId]);\n    }\n\n    function withdrawDeposit(uint256 _wei)\n        public\n        collectPatronagePatron(msgSender())\n    {\n        _withdrawDeposit(_wei);\n    }\n\n    function withdrawBenefactorFunds() public {\n        withdrawBenefactorFundsTo(msgSender());\n    }\n\n    function exit() public collectPatronagePatron(msgSender()) {\n        _withdrawDeposit(deposit[msgSender()]);\n    }\n\n    function _withdrawDeposit(uint256 _wei) internal {\n        require(deposit[msgSender()] >= _wei, \"withdrawing too much\");\n\n        deposit[msgSender()] = deposit[msgSender()].sub(_wei);\n\n        if (!sendErc20(_wei, msgSender())) {\n            revert(\"withdrawal failed\");\n        }\n    }\n\n    function _foreclose(uint256 tokenId) internal {\n        address currentOwner = assetToken.ownerOf(tokenId);\n        resetTokenOnForeclosure(tokenId, currentOwner);\n        state[tokenId] = StewardState.Foreclosed;\n\n        emit Foreclosure(currentOwner, timeLastCollectedPatron[currentOwner]);\n    }\n\n    function transferAssetTokenTo(\n        uint256 tokenId,\n        address _currentOwner,\n        address _newOwner,\n        uint256 _newPrice\n    ) internal {\n        require(_newPrice < 10000 ether, \"exceeds max price\");\n\n        uint256 scaledOldPrice = price[tokenId].mul(\n            patronageNumerator[tokenId]\n        );\n        uint256 scaledNewPrice = _newPrice.mul(patronageNumerator[tokenId]);\n\n        totalPatronOwnedTokenCost[_newOwner] = totalPatronOwnedTokenCost[_newOwner]\n            .add(scaledNewPrice);\n        totalPatronTokenGenerationRate[_newOwner] = totalPatronTokenGenerationRate[_newOwner]\n            .add(globalTokenGenerationRate);\n\n        address tokenBenefactor = benefactors[tokenId];\n        totalBenefactorTokenNumerator[tokenBenefactor] = totalBenefactorTokenNumerator[tokenBenefactor]\n            .add(scaledNewPrice);\n\n        if (_currentOwner != address(this) && _currentOwner != address(0)) {\n            totalPatronOwnedTokenCost[_currentOwner] = totalPatronOwnedTokenCost[_currentOwner]\n                .sub(scaledOldPrice);\n\n            totalPatronTokenGenerationRate[_currentOwner] = totalPatronTokenGenerationRate[_currentOwner]\n                .sub(globalTokenGenerationRate);\n\n            totalBenefactorTokenNumerator[tokenBenefactor] = totalBenefactorTokenNumerator[tokenBenefactor]\n                .sub(scaledOldPrice);\n        }\n\n        assetToken.transferFrom(_currentOwner, _newOwner, tokenId);\n\n        price[tokenId] = _newPrice;\n    }\n\n    function resetTokenOnForeclosure(uint256 tokenId, address _currentOwner)\n        internal\n    {\n        uint256 scaledPrice = price[tokenId].mul(patronageNumerator[tokenId]);\n\n        totalPatronOwnedTokenCost[_currentOwner] = totalPatronOwnedTokenCost[_currentOwner]\n            .sub(scaledPrice);\n\n        totalPatronTokenGenerationRate[_currentOwner] = totalPatronTokenGenerationRate[_currentOwner]\n            .sub((globalTokenGenerationRate));\n\n        address tokenBenefactor = benefactors[tokenId];\n        totalBenefactorTokenNumerator[tokenBenefactor] = totalBenefactorTokenNumerator[tokenBenefactor]\n            .sub(scaledPrice);\n\n        assetToken.transferFrom(_currentOwner, address(this), tokenId);\n    }\n\n    // THIS CODE IS PURELY FOR TESTING GSN - IT DOES NOTHING!\n    event TestEvent(address sender, address paymentTokenAdr, address randomArg);\n\n    function testFunctionThatDoesNothing(address randomArg) public {\n        emit TestEvent(msgSender(), address(paymentToken), randomArg);\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ],
        "": [
          "id",
          "ast"
        ]
      }
    },
    "evmVersion": "istanbul"
  }
}